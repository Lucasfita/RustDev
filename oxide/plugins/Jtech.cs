////////////////////////////////////////////////////////////////////////////////////////////
// Jtech.cs generated by PluginMerger v1.0.6578.5766 - 1/5/2018 5:27:52 PM
// PluginInfo: Title = "Jtech", Author = "TheGreatJ", Version = "0.0.0", ResourceId = 2402
// OxideMod: http://oxidemod.org/plugins/jpipes.2402/
// GitHub: https://github.com/jacobcoughenour/Jtech
////////////////////////////////////////////////////////////////////////////////////////////


using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using Oxide.Core.Plugins;
using Oxide.Plugins;
using Oxide.Game.Rust.Cui;
using Oxide.Core.Libraries.Covalence;
using UnityEngine;
using Oxide.Plugins.JtechCore;
using System.Linq;
using System.Text;
using Oxide.Core;
using Oxide.Plugins.JtechCore.Util;

namespace Oxide.Plugins {

	[Info("Jtech", "TheGreatJ", "0.0.0", ResourceId = 2402)]
	class Jtech : RustPlugin {

		#region Oxide Hooks

		void Init() {

			// TODO
			// register lang messages
			// load config

			NextFrame(() => {
				foreach (var player in BasePlayer.activePlayerList)
					UserInfo.Get(player);
			});

		}

		void OnServerInitialized() {
			
			RegisterDeployables();

			DataManager.Load();
			JDeployableManager.LoadDeployables();

			// start update
			timer.Repeat(0.25f, 0, JDeployableManager.Update);
		}
		
		void Unload() {

			OnServerSave();
			JDeployableManager.UnloadJDeployables();

			// Destroy UserInfo from all the players
			var users = UnityEngine.Object.FindObjectsOfType<UserInfo>();
			if (users != null) {
				foreach (UserInfo go in users) {
					go.DestroyCui();
					go.CancelPlacing();
					GameObject.Destroy(go);
				}
			}

		}
		
		// removes anything named UserInfo from the player
		[ConsoleCommand("jtech.clean")]
		private void cmdjtechclean(ConsoleSystem.Arg arg) {

			List<UnityEngine.Object> uis = new List<UnityEngine.Object>();
			foreach (var player in BasePlayer.activePlayerList) {
				foreach (var c in player.GetComponents<Component>()) {
					if (c.GetType().ToString() == "Oxide.Plugins.JtechCore.UserInfo") {
						uis.Add(c);
					}
				}
			}

			foreach (var u in uis) {
				UnityEngine.Object.Destroy(u);
			}

			Puts($"{uis.Count} destroyed");

			NextFrame(() => {
				foreach (var player in BasePlayer.activePlayerList)
					UserInfo.Get(player);
			});
		}

		void OnNewSave(string filename) {
			JDeployableManager.UnloadJDeployables();
			JDeployableManager.SaveJDeployables();
			DataManager.Save();
		}

		void OnServerSave() {
			JDeployableManager.SaveJDeployables();
			DataManager.Save();
		}

		void RegisterDeployables() {
			JDeployableManager.RegisterJDeployable<JtechDeployables.TransportPipe>();
			JDeployableManager.RegisterJDeployable<JtechDeployables.Assembler>();
			//JDeployableManager.RegisterJDeployable<JtechDeployables.SyncBox>();
			//JDeployableManager.RegisterJDeployable<JtechDeployables.TrashCan>();
			//JDeployableManager.RegisterJDeployable<JtechDeployables.AutoFarm>();
		}


		#region Player

		void OnPlayerSleepEnded(BasePlayer player) {
			// Add UserInfo to player
			UserInfo.Get(player);
		}

		void OnItemDeployed(Deployer deployer, BaseEntity entity) => UserInfo.Get(deployer?.GetOwnerPlayer())?.OnDeployPlaceholder(entity);

		void OnEntityBuilt(Planner planner, GameObject go) {
			BaseEntity entity = go?.GetComponent<BaseEntity>();
			if (entity != null)
				UserInfo.Get(planner?.GetOwnerPlayer())?.OnDeployPlaceholder(entity);
		}

		bool? CanMoveItem(Item item, PlayerInventory playerLoot, uint targetContainer, int targetSlot) {
			return UserInfo.Get(playerLoot.GetComponent<BasePlayer>())?.CanMoveItem(item, targetSlot);
		}

		#endregion

		#region Structure

		void OnHammerHit(BasePlayer player, HitInfo hit) {

			UserInfo.OnHammerHit(player, hit);
			hit.HitEntity?.GetComponent<JDeployable.Child>()?.parent.OnHammerHit(player, hit);

		}

		void OnStructureDemolish(BaseCombatEntity entity, BasePlayer player) => OnKilledChild((BaseEntity) entity);
		void OnEntityDeath(BaseCombatEntity entity, HitInfo info) => OnKilledChild((BaseEntity) entity);
		void OnEntityKill(BaseNetworkable entity) => OnKilledChild((BaseEntity) entity);

		void OnKilledChild(BaseEntity entity) {
			JDeployable.Child c = entity?.GetComponent<JDeployable.Child>();
			if (c != null && c.parent != null)
				KillDeployable(c.parent);
		}

		void KillDeployable(JDeployable deployable) {
			NextFrame(() => {
				deployable.Kill(BaseNetworkable.DestroyMode.Gib);
			});
		}

		bool? OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitInfo) {

			if (entity != null && hitInfo != null) {

				JDeployable.Child c = entity?.GetComponent<JDeployable.Child>();
				if (c != null && c.parent != null) {

					if (true) // if nodecay
						hitInfo.damageTypes.Scale(Rust.DamageType.Decay, 0f); // no decay damage
					float damage = hitInfo.damageTypes.Total();
					if (damage > 0) {
						
						float newhealth = entity.health - damage;
						if (newhealth > 0f)
							c.parent.SetHealth(newhealth);
						else
							KillDeployable(c.parent);
					}
					return true;
				}
			}
			return null;
		}

		bool? CanPickupEntity(BaseCombatEntity entity, BasePlayer player) {
			JDeployable.Child c = entity?.GetComponent<JDeployable.Child>();
			if (c != null && c.parent != null && player != null)
				return c.parent.CanPickupEntity(c, player);
			return null;
		}

		void OnStructureRepair(BaseCombatEntity entity, BasePlayer player) {
			JDeployable.Child c = entity?.GetComponent<JDeployable.Child>();
			if (c != null && c.parent != null && player != null)
				NextTick(() => c.parent.OnStructureRepair(entity, player));
		}

		void OnStructureRotate(BaseCombatEntity entity, BasePlayer player) {
			entity?.GetComponent<JDeployable.Child>()?.parent.OnStructureRotate(entity, player);
		}

		bool? OnStructureUpgrade(BaseCombatEntity entity, BasePlayer player, BuildingGrade.Enum grade) {
			JDeployable.Child c = entity?.GetComponent<JDeployable.Child>();
			if (c != null && c.parent != null && player != null)
				return c.parent.OnStructureUpgrade(c, player, grade);
			return null;
		}


		#endregion

		#region Vending Machine

		bool? CanAdministerVending(VendingMachine machine, BasePlayer player) =>
			machine?.GetComponent<JDeployable.Child>()?.parent.CanAdministerVending(machine, player);

		bool? CanUseVending(VendingMachine machine, BasePlayer player) =>
			machine?.GetComponent<JDeployable.Child>()?.parent.CanUseVending(machine, player);

		bool? CanVendingAcceptItem(VendingMachine machine, Item item) =>
			machine?.GetComponent<JDeployable.Child>()?.parent.CanVendingAcceptItem(machine, item);

		object OnRotateVendingMachine(VendingMachine machine, BasePlayer player) =>
			machine?.GetComponent<JDeployable.Child>()?.parent.OnRotateVendingMachine(machine, player);

		void OnToggleVendingBroadcast(VendingMachine machine, BasePlayer player) =>
			machine?.GetComponent<JDeployable.Child>()?.parent.OnToggleVendingBroadcast(machine, player);

		#endregion


		#endregion

		[ChatCommand("jtech")]
		private void jtechmainchat(BasePlayer player, string cmd, string[] args) {
			UserInfo.ShowOverlay(player);
		}

		[ConsoleCommand("jtech.showoverlay")]
		private void showoverlay(ConsoleSystem.Arg arg) {
			UserInfo.ShowOverlay(arg.Player());
		}

		[ConsoleCommand("jtech.closeoverlay")]
		private void closeoverlay(ConsoleSystem.Arg arg) {
			UserInfo.HideOverlay(arg.Player());
		}

		[ConsoleCommand("jtech.closemenu")]
		private void closemenu(ConsoleSystem.Arg arg) {
			UserInfo.HideMenu(arg.Player());
		}

		[ConsoleCommand("jtech.menubutton")]
		private void menubutton(ConsoleSystem.Arg arg) {
			if (arg.HasArgs(2)) {
				UserInfo.HandleMenuButton(arg.Player(), arg.Args[0], arg.Args[1]);
			}
		}

		[ConsoleCommand("jtech.menuonoffbutton")]
		private void menuonoffbutton(ConsoleSystem.Arg arg) {
			if (arg.HasArgs()) {
				UserInfo.HandleMenuOnOffButton(arg.Player(), arg.Args[0]);
			}
		}

		[ConsoleCommand("jtech.startplacing")]
		private void startplacing(ConsoleSystem.Arg arg) {

			if (arg.HasArgs()) {

				Type deployabletype;
				if (JDeployableManager.TryGetType(arg.Args[0], out deployabletype)) {
					
					UserInfo.StartPlacing(arg.Player(), deployabletype);
				}
			}
		}

	}
}

namespace Oxide.Plugins.JtechCore {

	public static class Cui {

		public class Colors {
			public static string Green	  = "0 0.902 0.463";
			public static string Red	  = "1 0.239 0";
			public static string Blue	  = "0.251 0.769 1";
			public static string DarkBlue = "0.004 0.341 0.608";

			public class MenuButton {
				public static string Enabled		 = "0.8 0.8 0.8 0.3";
				public static string EnabledText	 = "1 1 1 0.9";
				public static string EnabledOn		 = $"{Green} 0.5";
				public static string EnabledOnText	 = "1 1 1 0.9";
				public static string EnabledOff		 = $"{Red} 0.5";
				public static string EnabledOffText	 = "1 1 1 0.9";

				public static string Disabled		 = "0.8 0.8 0.8 0.1";
				public static string DisabledText	 = "1 1 1 0.2";
			}
		}

		public static CuiLabel CreateLabel(string text, int i, float rowHeight, TextAnchor align = TextAnchor.MiddleLeft, int fontSize = 15, string xMin = "0", string xMax = "1", string color = "1.0 1.0 1.0 1.0") {
			return new CuiLabel {
				Text = { Text = text, FontSize = fontSize, Align = align, Color = color },
				RectTransform = { AnchorMin = $"{xMin} {1 - rowHeight * i + i * .002f}", AnchorMax = $"{xMax} {1 - rowHeight * (i - 1) + i * .002f}" }
			};
		}

		public static CuiButton CreateButton(string command, float i, float rowHeight, int fontSize = 15, string content = "+", string xMin = "0", string xMax = "1", string color = "0.8 0.8 0.8 0.2", string textcolor = "1 1 1 1", float offset = -.005f) {
			return new CuiButton {
				Button = { Command = command, Color = color },
				RectTransform = { AnchorMin = $"{xMin} {1 - rowHeight * i + i * offset}", AnchorMax = $"{xMax} {1 - rowHeight * (i - 1) + i * offset}" },
				Text = { Text = content, FontSize = fontSize, Align = TextAnchor.MiddleCenter, Color = textcolor }
			};
		}

		public static CuiPanel CreatePanel(string anchorMin, string anchorMax, string color = "0 0 0 0") {
			return new CuiPanel {
				Image = { Color = color },
				RectTransform = { AnchorMin = anchorMin, AnchorMax = anchorMax }
			};
		}

		public static CuiElement CreateInputField(string parent = "Hud", string command = "", string text = "", int fontsize = 14, int charlimit = 100, string name = null) {

			if (string.IsNullOrEmpty(name))
				name = CuiHelper.GetGuid();
			CuiElement cuiElement = new CuiElement();
			cuiElement.Name = name;
			cuiElement.Parent = parent;
			cuiElement.Components.Add((ICuiComponent) new CuiInputFieldComponent { Text = "he", Align = TextAnchor.MiddleCenter, CharsLimit = charlimit, Command = command, FontSize = fontsize });
			cuiElement.Components.Add((ICuiComponent) new CuiNeedsCursorComponent());

			return cuiElement;
		}

		public static CuiElement AddOutline(CuiLabel label, string parent = "Hud", string color = "0.15 0.15 0.15 0.43", string dist = "1.1 -1.1", bool usealpha = false, string name = null) {
			if (string.IsNullOrEmpty(name))
				name = CuiHelper.GetGuid();
			CuiElement cuiElement = new CuiElement();
			cuiElement.Name = name;
			cuiElement.Parent = parent;
			cuiElement.FadeOut = label.FadeOut;
			cuiElement.Components.Add((ICuiComponent) label.Text);
			cuiElement.Components.Add((ICuiComponent) label.RectTransform);
			cuiElement.Components.Add((ICuiComponent) new CuiOutlineComponent {
				Color = color,
				Distance = dist,
				UseGraphicAlpha = usealpha
			});
			return cuiElement;
		}

		public static CuiElement CreateIcon(string parent = "Hud", string anchorMin = "0 0", string anchorMax = "1 1", string imageurl = "", string color = "1 1 1 1") => new CuiElement {
			Parent = parent,
			Components = {
				new CuiRawImageComponent {
					Url = imageurl,
					Sprite = "assets/content/textures/generic/fulltransparent.tga",
					Color = color
				},
				new CuiRectTransformComponent {
					AnchorMin = anchorMin,
					AnchorMax = anchorMax
				},
			}
		};

		public static void FakeDropShadow(CuiElementContainer elements, string parent = "Hud", float anchorMinx = 0, float anchorMiny = 0, float anchorMaxx = 1, float anchorMaxy = 1, float widthseparation = 0.025f, float heightseparation = 0.025f, int dist = 3, string color = "0.15 0.15 0.15 0.1") {

			for (var i = 1; i <= dist; i++)
				elements.Add(
					new CuiPanel {
						Image = { Color = color },
						RectTransform = { AnchorMin = $"{anchorMinx - widthseparation * i} {anchorMiny - heightseparation * i}", AnchorMax = $"{anchorMaxx + widthseparation * i} {anchorMaxy + heightseparation * i}" }
					}, parent
				);
		}

		//private static char[] bglut = new char[] {' ','.',':','-','=','+','*','#','%','@'};
		//private static char[] bglut = "@@@@@@@######MMMBBHHHAAAA&&GGhh9933XXX222255SSSiiiissssrrrrrrr;;;;;;;;:::::::,,,,,,,........".ToCharArray();
		//private static char[] bglut = "@MBHENR#KWXDFPQASUZbdehx*8Gm&04LOVYkpq5Tagns69owz$CIu23Jcfry%1v7l+it[] {}?j|()=~!-/<>\"^_';,:`.".ToCharArray();

		//public static string ASCIIbg(int width, int height, float scalex, float scaley, Color white, Color black) {

		//	List<string> lines = new List<string>();
		//	for (int y = 0; y < height; y++) {
		//		string line = "";
		//		for (int x = 0; x < width; x++) {
		//			//int r = Mathf.FloorToInt(Mathf.Clamp(UnityEngine.Mathf.PerlinNoise(x / scalex, y / scaley) * bglut.Length, 0, bglut.Length - 1));
		//			float r = UnityEngine.Mathf.PerlinNoise(x / scalex, y / scaley);

		//			UnityEngine.Color color = Color.Lerp(black, white, r*0.5f);

		//			//line += $"<color=#{ColorUtility.ToHtmlStringRGB(color)}> × </color>";
		//			line += " × ";
		//		}
		//		lines.Add(line);
		//	}
		//	return string.Join("", lines.ToArray());
		//	//return string.Join("\n", lines.ToArray());
		//}

		public static CuiButton CreateMenuButton(JDeployable dep, ButtonInfo info, string anchorMin = "0 0", string anchorMax = "1 1", int fontSize = 15, string color = "", string textcolor = "") {
			return CreateMenuButton(
				info.State == ButtonInfo.ButtonState.Enabled ? $"jtech.menubutton {dep.Id} {info.Value}" : "", 
				info.Label, anchorMin, anchorMax, fontSize, 
				color != string.Empty ? color : info.GetColor(),
				textcolor != string.Empty ? textcolor : info.GetTextColor());
		}

		private static CuiButton CreateMenuButton(string command, string label, string anchorMin = "0 0", string anchorMax = "1 1", int fontSize = 15, string color = "0.8 0.8 0.8 0.2", string textcolor = "1 1 1 1") {
			return new CuiButton {
				Button = { Command = command, Color = color },
				RectTransform = { AnchorMin = anchorMin, AnchorMax = anchorMax },
				Text = { Text = label, FontSize = fontSize, Align = TextAnchor.MiddleCenter, Color = textcolor }
			};
		}

		public class ButtonInfo {

			public string Label { get; }
			public string Value { get; }
			public bool ToggleValue { get; }
			public ButtonState State { get; }
			public ButtonType Type { get; }

			public enum ButtonState {
				Enabled,
				Disabled
			}
			public enum ButtonType {
				Action, // string
				Toggle, // bool
				Enum    // enum
			}

			/// <summary>
			/// JDeployable Menu Button Info
			/// </summary>
			/// <param name="label">Label shown on the button</param>
			/// <param name="value">Value sent MenuButtonCallback</param>
			/// <param name="state"></param>
			public ButtonInfo(string label, string value, ButtonState state = ButtonState.Enabled) {
				Label = label;
				Value = value;
				State = state;
				Type = ButtonType.Action;
			}

			/// <summary>
			/// JDeployable Menu Button Info
			/// </summary>
			/// <param name="label">Label shown on the button</param>
			/// <param name="value">Value sent MenuButtonCallback</param>
			/// <param name="OnOff">Show as On or Off</param>
			public ButtonInfo(string label, string value, bool OnOff, ButtonState state = ButtonState.Enabled) {
				Label = label;
				Value = value;
				ToggleValue = OnOff;
				State = state;
				Type = ButtonType.Toggle;
			}

			/// <summary>
			/// Get button color
			/// </summary>
			public string GetColor() {
				if (Type == ButtonType.Toggle) {
					if (ToggleValue)
						return State == ButtonState.Enabled ? Colors.MenuButton.EnabledOn : Colors.MenuButton.Disabled;
					else
						return State == ButtonState.Enabled ? Colors.MenuButton.EnabledOff : Colors.MenuButton.Disabled;
				} else {
					return State == ButtonState.Enabled ? Colors.MenuButton.Enabled : Colors.MenuButton.Disabled;
				}
			}

			/// <summary>
			/// Get text color
			/// </summary>
			public string GetTextColor() {
				if (Type == ButtonType.Toggle) {
					if (ToggleValue)
						return State == ButtonState.Enabled ? Colors.MenuButton.EnabledOnText : Colors.MenuButton.DisabledText;
					else
						return State == ButtonState.Enabled ? Colors.MenuButton.EnabledOffText : Colors.MenuButton.DisabledText;
				} else {
					return State == ButtonState.Enabled ? Colors.MenuButton.EnabledText : Colors.MenuButton.DisabledText;
				}
			}
		}

		public static class Menu {

			public static string CreateOverlay(CuiElementContainer elements, UserInfo userInfo) {

				List<Type> registeredDeployables = JDeployableManager.DeployableTypes.Keys.ToList<Type>();

				float aspect = 0.5625f; // use this to scale width values for 1:1 aspect
				
				float buttonsize = 0.16f;
				float buttonsizeaspect = buttonsize * aspect;
				float buttonspacing = 0.04f * aspect;
				int numofbuttons = registeredDeployables.Count;
				int maxbuttonswrap = 8;

				string parent = elements.Add(
					new CuiPanel { // blue background
						Image = { Color = $"{Colors.DarkBlue} 0.86" },
						RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
						CursorEnabled = true
					}
				);

				elements.Add(
					AddOutline(
						new CuiLabel {
							Text = { Text = "Choose a Deployable", FontSize = 22, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1" },
							RectTransform = { AnchorMin = "0 0.5", AnchorMax = "1 1" }
						}, parent, $"{Colors.DarkBlue} 0.6")
				);

				// close overlay if you click the background
				elements.Add(
					new CuiButton {
						Button = { Command = $"jtech.closeoverlay", Color = "0 0 0 0" },
						RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
						Text = { Text = string.Empty }
					}, parent
				);

				
				// create buttons
				for (int i = 0; i < numofbuttons; i++) {

					Type currenttype = registeredDeployables[i];
					JInfoAttribute info;
					JDeployableManager.DeployableTypes.TryGetValue(currenttype, out info);
					List<JRequirementAttribute> requirements;
					JDeployableManager.DeployableTypeRequirements.TryGetValue(currenttype, out requirements);

					bool canCraftDeployable = userInfo.CanCraftDeployable(currenttype);

					int ix = i % maxbuttonswrap;
					int iy = i/maxbuttonswrap;
					
					float posx = 0.5f + ((ix - (numofbuttons * 0.5f)) * (buttonsizeaspect + buttonspacing)) + buttonspacing * 0.5f;
					float posy = 0.55f - (buttonsize * 0.5f) - (iy * ((buttonsize) + buttonspacing*2));

					// slight outline around the button
					FakeDropShadow(elements, parent, posx, posy - buttonsize*0.5f, posx + buttonsizeaspect, posy + (buttonsize), 0.005f*aspect, 0.005f, 1, $"{Colors.DarkBlue} 0.1");

					// main button
					string button = elements.Add(
						new CuiButton {
							Button = { Command = canCraftDeployable ? $"jtech.startplacing {currenttype.FullName}" : "", Color = canCraftDeployable ? $"{Colors.Blue} 0.25" : "0.749 0.922 1 0.075" },
							RectTransform = { AnchorMin = $"{posx} {posy - buttonsize * 0.5f}", AnchorMax = $"{posx + buttonsizeaspect} {posy + (buttonsize)}" },
							Text = { Text = "", FontSize = 12, Align = TextAnchor.MiddleCenter, Color = "1 1 1 0" }
						}, parent
					);

					// deployable icon
					elements.Add(
						CreateIcon(button, "0.05 0.383", "0.95 0.95", info.IconUrl, canCraftDeployable ? "1 1 1 1" : "0.749 0.922 1 0.5")
					);

					// button bottom area
					string buttonbottom = elements.Add(
						new CuiPanel {
							Image = { Color = "0 0 0 0" },
							RectTransform = { AnchorMin = "0 0", AnchorMax = "1 0.3333" }
						}, button
					);

					// deployable name label shadow
					FakeDropShadow(elements, buttonbottom, 0, 0.6f, 1, 1f, 0, 0.02f, 2, $"{Colors.DarkBlue} 0.15");

					// deployable name label
					string buttonlabel = elements.Add(
						new CuiPanel {
							Image = { Color = canCraftDeployable ? $"{Colors.Blue} 0.9" : "0.749 0.922 1 0.3" },
							RectTransform = { AnchorMin = "-0.031 0.6", AnchorMax = "1.0125 1" }
						}, buttonbottom
					);

					// deployable name label text
					elements.Add(
						AddOutline(
						new CuiLabel {
							Text = { Text = info.Name, FontSize = 16, Align = TextAnchor.MiddleCenter, Color = canCraftDeployable ? "1 1 1 1" : "1 1 1 0.6" },
							RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" }
						}, buttonlabel, $"{Colors.DarkBlue} 0.3")
					);

					// item requirements area
					string materiallist = elements.Add(
						new CuiPanel {
							Image = { Color = "0 0 0 0" },
							RectTransform = { AnchorMin = "0 0.1", AnchorMax = "0.9815 0.45" }
						}, buttonbottom
					);


					// item requirements

					int numofrequirements = requirements.Count;
					for (int r = 0; r < numofrequirements; r++) {

						JRequirementAttribute cur = requirements[r];

						bool hasRequirement = userInfo.HasUsableItem(cur.ItemId, cur.ItemAmount);

						float pos = 0.6f - (numofrequirements*0.1f) + r*(0.2f) - (cur.PerUnit != string.Empty ? cur.PerUnit.Length*0.026f + 0.09f : 0);
						string min = $"{pos - 0.1f} 0";
						string max = $"{pos + 0.1f} 1";
						
						// item icon
						elements.Add(
							CreateIcon(materiallist, min, max, Util.Icons.GetItemIconURL(cur.ItemShortName, 64), hasRequirement ? "1 1 1 1" : "1 1 1 0.5")
						);
						
						// item amount
						if (cur.ItemAmount > 1) {
							elements.Add(
								AddOutline(
								new CuiLabel {
									Text = { Text = $"{cur.ItemAmount}", FontSize = 12, Align = TextAnchor.MiddleCenter, Color = hasRequirement ? "1 1 1 1" : "1 0.835 0.31 1" },
									RectTransform = { AnchorMin = min, AnchorMax = max }
								}, materiallist, $"{Colors.DarkBlue} 0.3")
							);
						}

						// per unit
						if (cur.PerUnit != string.Empty) {
							elements.Add(
								AddOutline(
								new CuiLabel {
									Text = { Text = $"per {cur.PerUnit}", FontSize = 12, Align = TextAnchor.MiddleLeft, Color = "1 1 1 1" },
									RectTransform = { AnchorMin = $"{pos + 0.135f} 0", AnchorMax = $"{pos + 1.0f} 1" }
								}, materiallist, $"{Colors.DarkBlue} 0.3")
							);
						}
					}

				}
				

				return parent;
			}

			public static string CreateMenu(CuiElementContainer elements, UserInfo userInfo, JDeployable deployable) {
				
				JInfoAttribute info;
				JDeployableManager.DeployableTypes.TryGetValue(deployable.GetType(), out info);

				float aspect = 0.5625f; // use this to scale width values for 1:1 aspect

				float mainheight = 0.45f;
				float mainwidth = 0.55f;
				float mainwidthaspect = mainwidth * aspect;
				float mainaspect = mainheight / mainwidth;
				float mainy = 0.475f;

				string parent = elements.Add(
					new CuiPanel { // blue background
						Image = { Color = $"{Colors.DarkBlue} 0.86" },
						RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
						CursorEnabled = true
					}
				);

				//elements.Add(
				//	new CuiLabel {
				//		Text = { Text = new StringBuilder().Insert(0, "▀", 10000).ToString(), FontSize = 6, Align = TextAnchor.MiddleCenter, Color = "1 1 1 0.5" },
				//		RectTransform = { AnchorMin = $"{0.5f - mainwidthaspect * 0.5f} {mainy - mainheight * 0.5f}", AnchorMax = $"{0.5f + mainwidthaspect * 0.5f} {mainy + mainheight * 0.5f}" }
				//	}, parent
				//);
				
				//return parent;

				float gap = 0.0125f;

				float centercontentheight = 0.8f;
				float centercontentwidth = centercontentheight * mainaspect; // keep the main content square

				// slight outline around main
				FakeDropShadow(elements, parent, 0.5f - mainwidthaspect * 0.5f, mainy - mainheight * 0.5f, 0.5f + mainwidthaspect * 0.5f, mainy + mainheight * 0.5f, 0.005f * aspect, 0.005f, 1, $"{Colors.DarkBlue} 0.3");

				// close overlay if you click the background
				elements.Add(
					new CuiButton {
						Button = { Command = $"jtech.closemenu", Color = "0 0 0 0" },
						RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
						Text = { Text = string.Empty }
					}, parent
				);

				string main = elements.Add(
					new CuiPanel {
						Image = { Color = "0 0 0 0" },
						RectTransform = { AnchorMin = $"{0.5f - mainwidthaspect * 0.5f} {mainy - mainheight * 0.5f}", AnchorMax = $"{0.5f + mainwidthaspect * 0.5f} {mainy + mainheight * 0.5f}" }
					}, parent
				);


				// top

				string top = elements.Add(
					new CuiPanel {
						Image = { Color = $"{Colors.Blue} 0.25" },
						RectTransform = { AnchorMin = $"0 {centercontentheight + gap}", AnchorMax = $"1 1" },
					}, main
				);

				// deployable name
				elements.Add(
					AddOutline(
					new CuiLabel {
						Text = { Text = $"{info.Name}", FontSize = 24, Align = TextAnchor.LowerLeft, Color = "1 1 1 1" },
						RectTransform = { AnchorMin = "0 1", AnchorMax = "1 2" }
					}, top, $"{Colors.DarkBlue} 0.6")
				);

				float topaspect = (1 - centercontentheight + gap / 1) * mainaspect - 0.0025f;
				float iconwidth = topaspect;
				float iconpadding = 0.03f;
				float textpadding = 0.125f;
				float iconleft = 1 - iconwidth - 0.02f;

				// deployable description
				elements.Add(
					AddOutline(
					new CuiLabel {
						Text = { Text = info.Description, FontSize = 12, Align = TextAnchor.UpperLeft, Color = "1 1 1 1" },
						RectTransform = { AnchorMin = $"{textpadding * topaspect} {textpadding}", AnchorMax = $"{iconleft - (textpadding * topaspect)} {1f - textpadding}" }
					}, top, $"{Colors.DarkBlue} 0.8")
				);

				// deployable icon
				string iconarea = elements.Add(
					new CuiPanel {
						Image = { Color = "0 0 0 0" },
						RectTransform = { AnchorMin = $"{iconleft} 0", AnchorMax = $"{iconleft + iconwidth - (0.02f * topaspect)} {0.98f}" },
					}, top
				);

				elements.Add(
					CreateIcon(iconarea, $"{iconpadding} {iconpadding}", $"{1 - iconpadding} {1 - iconpadding}", info.IconUrl, "1 1 1 1")
				);




				// content	

				string content = elements.Add(
					new CuiPanel {
						Image = { Color = "0 0 0 0" },
						RectTransform = { AnchorMin = "0 0", AnchorMax = $"{centercontentwidth} {centercontentheight}" },
					}, main
				);
				
				string contentinside = elements.Add(
					new CuiPanel {
						Image = { Color = "0 0 0 0" },
						RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.994 0.99" },
					}, content
				);

				deployable.GetMenuContent(elements, contentinside, userInfo);


				// actions

				string buttons = elements.Add(
					new CuiPanel {
						Image = { Color = $"{Colors.Blue} 0" },
						RectTransform = { AnchorMin = $"{centercontentwidth + gap * mainaspect} 0", AnchorMax = $"1 {centercontentheight}" }
					}, main
				);

				string buttonsinside = elements.Add(
					new CuiPanel {
						Image = { Color = "0 0 0 0" },
						RectTransform = { AnchorMin = $"0 0", AnchorMax = $"0.985 0.99" },
					}, buttons
				);

				List<ButtonInfo> buttoninfos = deployable.GetMenuButtons(userInfo);

				float buttonspacing = 0.015f;
				float maxheight = 0.2f;
				float buttonratio = (1 + buttonspacing) / (buttoninfos.Count + 1);
				float buttonheight = (buttonratio < (1 + buttonspacing) / (1 / maxheight) ? buttonratio : maxheight);

				elements.Add(
					CreateMenuButton(
						$"jtech.menuonoffbutton {deployable.Id}", deployable.data.isEnabled ? "Turn Off" : "Turn On",
						$"0 0", $"1 {buttonheight - buttonspacing}", 15,
						deployable.data.isEnabled ? Colors.MenuButton.EnabledOff : Colors.MenuButton.EnabledOn, 
						deployable.data.isEnabled ? Colors.MenuButton.EnabledOffText : Colors.MenuButton.EnabledOnText
					),
					buttonsinside
				);

				for (int i = 0; i < buttoninfos.Count; i++) {

					int yi = i + 1;

					elements.Add(
						CreateMenuButton(
							deployable, buttoninfos[i],
							$"0 {(buttonheight * yi)}", $"1 {buttonheight * (yi + 1) - buttonspacing}"
						),
						buttonsinside
					);
				}

				//elements.Add(
				//	CreateIcon(button, $"0 0", $"1 1", "", "1 1 1 1")
				//);

				return parent;
			}

		}
	}


	public static class DataManager {
		
		public class StoredData {
			public Dictionary<int, JDeployableManager.DeployableSaveData> d = new Dictionary<int, JDeployableManager.DeployableSaveData>();
		}

		public static StoredData data;

		public static void Load() {

			data = new StoredData();
			LoadData(ref data);

			if (data == null) {
				data = new StoredData();
				Interface.Oxide.LogWarning("[JtechCore] save data is null?  Creating new save data...");
				SaveData(data);
			}
		}

		public static void Save() {
			
			SaveData(data);
		}

		private static void LoadData<T>(ref T d) => d = Interface.Oxide.DataFileSystem.ReadObject<T>("Jtech");
		private static void SaveData<T>(T d) => Interface.Oxide.DataFileSystem.WriteObject("Jtech", d);
	}

	public class JDeployable {

		// TODO storage container management
			// save/load, hooks

		public class SaveData {

			public ulong ownerId;
			public string ownerName;
			public bool isEnabled = true;
			public float health;
			public List<float> transform;
			public Dictionary<string, string> custom = new Dictionary<string, string>();
			public Dictionary<string, List<SavedItem>> inv = new Dictionary<string, List<SavedItem>>();

			public class SavedItem {

				public string shortname;
				public int itemid;
				public float condition;
				public int amount;
				public int ammoamount;
				public string ammotype;
				public ulong skinid;
				public bool weapon;
				public List<SavedItem> mods;

				public SavedItem FromItem(Item item) {
					SavedItem si = new SavedItem {
						shortname = item.info?.shortname,
						amount = item.amount,
						mods = new List<SavedItem>(),
						skinid = item.skin,
						itemid = item.info.itemid,
						weapon = false
					};
					if (item.hasCondition)
						si.condition = item.condition;
					if (item.info.category.ToString() == "Weapon") {
						BaseProjectile weapon = item.GetHeldEntity() as BaseProjectile;
						if (weapon != null) {
							if (weapon.primaryMagazine != null) {
								si.ammoamount = weapon.primaryMagazine.contents;
								si.ammotype = weapon.primaryMagazine.ammoType.shortname;
								si.weapon = true;
								if (item.contents != null)
									foreach (var mod in item.contents.itemList)
										if (mod.info.itemid != 0)
											si.mods.Add(FromItem(mod));
							}
						}
					}
					return si;
				}

				public Item ToItem() {
					if (weapon) {
						Item item = ItemManager.CreateByItemID(itemid, 1, skinid);
						if (item.hasCondition)
							item.condition = condition;
						var weapon = item.GetHeldEntity() as BaseProjectile;
						if (weapon != null) {
							var def = ItemManager.FindItemDefinition(ammotype);
							weapon.primaryMagazine.ammoType = def;
							weapon.primaryMagazine.contents = ammoamount;
						}
						if (mods != null)
							foreach (var mod in mods)
								item.contents.AddItem(mod.ToItem().info, 1);
						return item;
					} else {
						if (amount < 1)
							amount = 1;
						Item item = ItemManager.CreateByItemID(itemid, amount, skinid);
						if (item.hasCondition)
							item.condition =condition;
						return item;
					}
				}
			}

			/// <summary>
			/// Set userInfo as the owner
			/// </summary>
			/// <param name="userInfo"></param>
			public void SetUser(UserInfo userInfo) {
				this.ownerId = userInfo.player.userID;
				this.ownerName = userInfo.player.displayName;
			}

			/// <summary>
			/// Set transform
			/// </summary>
			/// <param name="transform"></param>
			public void SetTransform(Transform transform) {
				this.transform = new List<float>() {
					transform.position.x,
					transform.position.y,
					transform.position.z,

					transform.rotation.x,
					transform.rotation.y,
					transform.rotation.z,
					transform.rotation.w,
				};
			}

			/// <summary>
			/// Get Position
			/// </summary>
			public Vector3 GetPosition() {
				if (this.transform == null || this.transform.Count != 7)
					return Vector3.zero;
				return new Vector3(transform[0], transform[1], transform[2]);
			}

			/// <summary>
			/// Get Rotation
			/// </summary>
			public Quaternion GetRotation() {
				if (this.transform == null || this.transform.Count != 7)
					return Quaternion.identity;
				return new Quaternion(transform[3], transform[4], transform[5], transform[6]);
			}

			/// <summary>
			/// Set custom data value
			/// </summary>
			/// <typeparam name="T"></typeparam>
			/// <param name="name"></param>
			/// <param name="value"></param>
			public void Set(string name, string value) {
				if (custom.ContainsKey(name))
					custom[name] = value;
				else
					custom.Add(name, value);
			}

			/// <summary>
			/// Set custom data value
			/// </summary>
			/// <typeparam name="T"></typeparam>
			/// <param name="name"></param>
			/// <param name="value"></param>
			public void Set(string name, object value) {
				if (custom.ContainsKey(name))
					custom[name] = value.ToString();
				else
					custom.Add(name, value.ToString());
			}

			/// <summary>
			/// Get custom data value
			/// </summary>
			/// <typeparam name="T"></typeparam>
			/// <param name="name"></param>
			/// <param name="defaultvalue"></param>
			/// <returns></returns>
			public string Get(string name, string defaultvalue = "") {
				string value;
				if (this.custom.TryGetValue(name, out value))
					return value;
				return defaultvalue;
			}

			public bool Has(params string[] names) {
				foreach (string s in names) {
					if (!custom.ContainsKey(s))
						return false;
				}
				return true;
			}
		}

		public int Id;							// unique ID
		public SaveData data;					// current save data
		private bool isBeingDestroyed = false;	// if Kill() has already been called

		private BaseCombatEntity MainParent; // main parent entity that everything is parented to
		private List<BaseCombatEntity> ChildEntities = new List<BaseCombatEntity>(); // child entities attached to the parent entity

		private Dictionary<string, ItemContainer> containers = new Dictionary<string, ItemContainer>();

		public void SetMainParent(BaseCombatEntity baseCombatEntity) {
			baseCombatEntity.gameObject.AddComponent<Child>().parent = this;
			
			MainParent = baseCombatEntity;
			MainParent.enableSaving = false;
		}

		/// <summary>
		/// Gets MainParent and all ChildEntities of this JDeployable
		/// </summary>
		/// <returns></returns>
		public List<BaseCombatEntity> GetEntities() {
			var ents = new List<BaseCombatEntity>();
			ents.Add(MainParent);
			ents.AddRange(ChildEntities);
			return ents;
		}

		/// <summary>
		/// Parent entity to main parent.
		/// Note: make sure you .Spawn() the entity first.
		/// </summary>
		/// <param name="baseEntity"></param>
		public void AddChildEntity(BaseCombatEntity baseCombatEntity) {
			if (MainParent == null)
				return;

			Child c = baseCombatEntity.gameObject.GetComponent<Child>();
			if (c != null)
				c.parent = this;
			else {
				baseCombatEntity.gameObject.AddComponent<Child>().parent = this;
			}

			baseCombatEntity.SetParent(MainParent);
			baseCombatEntity.enableSaving = false;
			ChildEntities.Add(baseCombatEntity);
		}

		/// <summary>
		/// Use this to change the health.
		/// Updates health of all child entities and saves the new value to save data.
		/// </summary>
		/// <param name="newhealth"></param>
		public void SetHealth(float newhealth) {
			data.health = newhealth;
			if (MainParent != null)
				MainParent.health = newhealth;
			foreach (BaseCombatEntity e in ChildEntities) {
				e.health = newhealth;
				e.SendNetworkUpdate(BasePlayer.NetworkQueue.UpdateDistance);
			}
		}

		/// <summary>
		/// Kills JDeployable.
		/// </summary>
		/// <param name="mode"></param>
		/// <param name="remove">Remove JDeployable instance from JDeployableManager so it isn't saved</param>
		public void Kill(BaseNetworkable.DestroyMode mode = BaseNetworkable.DestroyMode.None, bool remove = true) {
			if (isBeingDestroyed)
				return;

			if (MainParent != null && !MainParent.IsDestroyed) {
				isBeingDestroyed = true;
				MainParent.Kill(mode);
			}

			if (remove)
				JDeployableManager.RemoveJDeployable(this.Id);
		}

		/// <summary>
		/// Attached to every BaseCombatEntity of the JDeployable.
		/// Useful for determining if an entity is part of a JDeployable and forwarding hooks to Child.parent.
		/// </summary>
		public class Child : MonoBehaviour {
			public JDeployable parent;
			private Coroutine delayedrun;

			/// <summary>
			/// Runs callback after a delay using a MonoBehaviour Coroutine.
			/// This can be used for basic animations and effects.
			/// </summary>
			/// <param name="delay">delay in seconds</param>
			/// <param name="callback"></param>
			public void RunDelayed(float delay, Action callback) {
				if (delayedrun != null)
					StopCoroutine(delayedrun); // cancel previous
				delayedrun = StartCoroutine(_RunDelayed(delay, callback));
			}

			private IEnumerator _RunDelayed(float delay, Action callback) {
				yield return new WaitForSecondsRealtime(delay);
				try {
					callback();
				} catch (Exception ex) {
					Debug.Log($"[JtechCore] JDeployable.Child.RunDelayed: {ex.InnerException.Message}");
				}
				delayedrun = null;
			}
		}

		#region Child Entity Hooks

		/// <summary>
		/// OnHammerHit hook for child entities
		/// </summary>
		public virtual void OnHammerHit(BasePlayer player, HitInfo hit) {
		}

		/// <summary>
		/// OnStructureRepair hook for child entities
		/// </summary>
		public virtual void OnStructureRepair(BaseCombatEntity entity, BasePlayer player) {
			SetHealth(entity.health);
		}

		/// <summary>
		/// OnStructureRotate hook for child entities
		/// </summary>
		public virtual void OnStructureRotate(BaseCombatEntity entity, BasePlayer player) {
		}

		/// <summary>
		/// OnStructureUpgrade hook for child entities
		/// </summary>
		public virtual bool? OnStructureUpgrade(Child child, BasePlayer player, BuildingGrade.Enum grade) {
			return null;
		}

		/// <summary>
		/// CanPickupEntity hook for child entities
		/// </summary>
		public virtual bool? CanPickupEntity(Child child, BasePlayer player) {
			return null;
		}

		/// <summary>
		/// CanAdministerVending hook for child entities
		/// </summary>
		public virtual bool? CanAdministerVending(VendingMachine machine, BasePlayer player) {
			return null;
		}

		/// <summary>
		/// CanUseVending hook for child entities
		/// </summary>
		public virtual bool? CanUseVending(VendingMachine machine, BasePlayer player) {
			return null;
		}

		/// <summary>
		/// CanVendingAcceptItem hook for child entities
		/// </summary>
		public virtual bool? CanVendingAcceptItem(VendingMachine machine, Item item) {
			return null;
		}

		/// <summary>
		/// OnRotateVendingMachine hook for child entities
		/// </summary>
		public virtual object OnRotateVendingMachine(VendingMachine machine, BasePlayer player) {
			return null;
		}

		/// <summary>
		/// OnToggleVendingBroadcast hook for child entities
		/// </summary>
		public virtual void OnToggleVendingBroadcast(VendingMachine machine, BasePlayer player) {
		}

		#endregion

		#region Placing

		/// <summary>
		/// Can User start placing this deployable?
		/// Item requirements are already handled by UserInfo.
		/// This is if you want to add custom requirements to creating your deployable.
		/// </summary>
		/// <returns>if user can start placing this deployable</returns>
		public static bool CanStartPlacing(UserInfo userInfo) {
			return true;
		}

		/// <summary>
		/// Puts a placeholder item in player's hotbar used for placing this deployable.
		/// OnDeployPlaceholder() is called when placeholder item is deployed.
		/// </summary>
		/// <param name="userInfo"></param>
		/// <returns></returns>
		public static Item GetPlaceholderItem(UserInfo userInfo) {
			return null;
		}

		/// <summary>
		/// Called when player deploys the placeholder item.
		/// Use this to add to the deployed entity or destroy it and replace it.
		/// Make sure you either call userInfo.DonePlacing() or userInfo.CancelPlacing().
		/// </summary>
		/// <param name="userInfo"></param>
		/// <param name="baseEntity"></param>
		public static void OnDeployPlaceholder(UserInfo userInfo, BaseNetworkable baseNetworkable) {
		}

		/// <summary>
		/// Called when player starts placing this deployable.
		/// Use this for displaying instructions via userInfo.ShowMessage().
		/// To stop placing you can either call userInfo.DonePlacing() or userInfo.CancelPlacing().
		/// </summary>
		public static void OnStartPlacing(UserInfo userInfo) {

		}

		/// <summary>
		/// Called after userInfo.DonePlacing() or userInfo.CancelPlacing().
		/// Use this to clean up anything left over from placing your deployable (visual aids, placeholder items, etc).
		/// </summary>
		public static void OnEndPlacing(UserInfo userInfo) {

		}

		/// <summary>
		/// Called when player is placing this deployable and hits an entity with a hammer.
		/// Use this if you want the player to select existing entities.
		/// Use userInfo.placingdata to store selected entities or other data.
		/// </summary>
		public static void OnPlacingHammerHit(UserInfo userInfo, HitInfo hit) {

		}
		
		/// <summary>
		/// Spawn a deployable from placing command and set default values.
		/// </summary>
		/// <returns>If successfully placed</returns>
		public virtual bool Place(UserInfo userInfo) {
			// set deployable variables here
			return Spawn();
		}

		#endregion
		
		/// <summary>
		/// Spawn your deployable from this.data
		/// </summary>
		/// <returns></returns>
		public virtual bool Spawn(bool placing = false) {
			// spawn from data
			return false;
		}

		public long _lastUpdate;

		/// <summary>
		/// Update loop
		/// </summary>
		/// <param name="timeDelta">elapsed time between updates in seconds</param>
		/// <returns></returns>
		public virtual bool Update(float timeDelta) {
			return true;
		}

		#region CUI

		// players that are currently looking at this JDeployable's menu
		private HashSet<UserInfo> _playerslookingatmenu = new HashSet<UserInfo>();

		/// <summary>
		/// Show JDeployable Menu for player
		/// </summary>
		public void ShowMenu(BasePlayer player) => ShowMenu(UserInfo.Get(player));

		/// <summary>
		/// Show JDeployable Menu for UserInfo
		/// </summary>
		public void ShowMenu(UserInfo userInfo) {
			userInfo.ShowMenu(this);
			_playerslookingatmenu.Add(userInfo);
		}

		/// <summary>
		/// Hide JDeployable Menu for player
		/// </summary>
		public void HideMenu(BasePlayer player) => HideMenu(UserInfo.Get(player));

		/// <summary>
		/// Hide JDeployable Menu for UserInfo
		/// </summary>
		public void HideMenu(UserInfo userInfo) {
			userInfo.HideMenu();
			_playerslookingatmenu.Remove(userInfo);
		}

		/// <summary>
		/// Hide JDeployable Menu for all players looking at it
		/// </summary>
		public void HideMenuAll() {
			HashSet<UserInfo> p = _playerslookingatmenu;
			foreach (var ui in p)
				HideMenu(ui);
		}

		/// <summary>
		/// Update JDeployable Menu for all players looking at it.
		/// </summary>
		public void UpdateMenu() {
			HashSet<UserInfo> p = _playerslookingatmenu;
			foreach (var ui in p) {
				ui.HideMenu();
				ui.ShowMenu(this);
			}
		}

		/// <summary>
		/// Gets the labels and values shown in the JDeployable Menu Info section
		/// </summary>
		public virtual Dictionary<string, string> GetMenuInfo(UserInfo userInfo) {
			return new Dictionary<string, string>() {
				{ "Owner", data.ownerName },
				{ "Health", data.health.ToString() }
			};
		}

		/// <summary>
		/// Gets the content area of the JDeployable Menu.
		/// By default, it creates an list of GetMenuInfo.
		/// Override it to create your own menu content.
		/// Also, parent is always at a 1:1 aspect ratio to help with sizing.
		/// </summary>
		public virtual void GetMenuContent(CuiElementContainer elements, string parent, UserInfo userInfo) {

			string main = elements.Add(
				new CuiPanel {
					Image = { Color = "0.251 0.769 1 0.25" },
					RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
				}, parent
			);

			float topheight = 0.075f;

			// top drop shadow
			elements.Add(
				new CuiPanel {
					Image = { Color = "0.004 0.341 0.608 0.15" },
					RectTransform = { AnchorMin = $"0 {1 - topheight - 0.008f}", AnchorMax = $"1 1" },
				}, main
			);

			elements.Add(
				new CuiPanel {
					Image = { Color = "0.004 0.341 0.608 0.15" },
					RectTransform = { AnchorMin = $"0 {1 - topheight - 0.016f}", AnchorMax = $"1 1" },
				}, main
			);
			
			// top area
			string top = elements.Add(
				new CuiPanel {
					Image = { Color = "0.251 0.769 1 0.2" },
					RectTransform = { AnchorMin = $"0 {1 - topheight}", AnchorMax = $"0.996 0.996" },
				}, main
			);

			elements.Add(
				new CuiLabel {
					Text = { Text = $"INFORMATION", FontSize = 12, Align = TextAnchor.MiddleLeft, Color = "1 1 1 0.75" },
					RectTransform = { AnchorMin = "0.03 0", AnchorMax = "1 1" }
				}, top
			);


			// Deployable Info

			float separator = 0.25f;
			float gap = 0.015f;
			float lineheight = 0.07f;

			// info area
			string infoarea = elements.Add(
				new CuiPanel {
					Image = { Color = "0 0 0 0" },
					RectTransform = { AnchorMin = "0 0", AnchorMax = $"1 {1 - topheight}" },
				}, main
			);

			Dictionary<string, string> info = GetMenuInfo(userInfo);

			for (int i = 0; i < info.Count; i++) {

				elements.Add(
					new CuiLabel {
						Text = { Text = info.Keys.ElementAt(i), FontSize = 12, Align = TextAnchor.MiddleRight, Color = "1 1 1 0.5" },
						RectTransform = { AnchorMin = $"0 {1 - gap - gap - (lineheight * i) - lineheight}", AnchorMax = $"{separator - gap} {1 - gap - gap - (lineheight * i)}" }
					}, infoarea
				);
				elements.Add(
					new CuiLabel {
						Text = { Text = info.Values.ElementAt(i), FontSize = 12, Align = TextAnchor.MiddleLeft, Color = "1 1 1 0.9" },
						RectTransform = { AnchorMin = $"{separator + gap} {1 - gap - gap - (lineheight * i) - lineheight}", AnchorMax = $"1 {1 - gap - gap - (lineheight * i)}" }
					}, infoarea
				);
			}

		}

		/// <summary>
		/// Gets the buttons to display on the right side of the Menu.
		/// </summary>
		public virtual List<Cui.ButtonInfo> GetMenuButtons(UserInfo userInfo) {
			return new List<Cui.ButtonInfo>();
		}
		
		/// <summary>
		/// Handler for the On/Off button in the JDeployable Menu.
		/// </summary>
		public void MenuOnOffButton(UserInfo player) {
			data.isEnabled = !data.isEnabled;
			UpdateMenu();
		}

		/// <summary>
		/// Callback for buttons in the JDeployable Menu.
		/// </summary>
		/// <param name="player"></param>
		/// <param name="value">The value from Cui.ButtonInfo</param>
		public virtual void MenuButtonCallback(UserInfo player, string value) {

		}

		#endregion

	}

	public class JDeployableManager {

		// Deployables that are currently spawned
		private static Dictionary<int, JDeployable> spawnedDeployables = new Dictionary<int, JDeployable>();
		private static Dictionary<Type, List<JDeployable>> spawnedDeployablesByType = new Dictionary<Type, List<JDeployable>>();

		private static void SpawnedDeployablesAdd(int id, JDeployable instance, Type type) {
			spawnedDeployables.Add(id, instance);

			if (!spawnedDeployablesByType.ContainsKey(type))
				spawnedDeployablesByType.Add(type, new List<JDeployable>());
			spawnedDeployablesByType[type].Add(instance);
		}

		private static void SpawnedDeployablesRemove(int id, JDeployable instance) {
			
			spawnedDeployables.Remove(id);

			Type type;
			if (!TryGetType(instance.ToString(), out type))
				return;

			if (spawnedDeployablesByType.ContainsKey(type))
				spawnedDeployablesByType[type].Remove(instance);

		}

		/// <summary>
		/// Get List of spawned deployables of type T
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <returns></returns>
		public static List<JDeployable> GetSpawned<T>() where T : JDeployable {

			List<JDeployable> spawned;
			spawnedDeployablesByType.TryGetValue(typeof(T), out spawned);
			return spawned;
		}

		/// <summary>
		/// Get Dictionary of all spawned deployables.  Key = Id and Value = JDeployable
		/// </summary>
		/// <returns></returns>
		public static Dictionary<int, JDeployable> GetSpawned() {
			return spawnedDeployables;
		}

		public static bool TryGetJDeployable(int id, out JDeployable deployable) {
			return spawnedDeployables.TryGetValue(id, out deployable);
		}

		#region Update

		private static Dictionary<Type, int> CurrentUpdateTimeslot = new Dictionary<Type, int>();

		
		/// <summary>
		/// Distributed JDeployable Update
		/// </summary>
		public static void Update() {

			long now = DateTime.Now.Ticks;

			foreach (var deployablebytype in spawnedDeployablesByType) { // for each type of deployable
				if (deployablebytype.Value.Count > 0) {

					JUpdateAttribute updateinfo;
					if (DeployableTypeUpdates.TryGetValue(deployablebytype.Key, out updateinfo)) { // get update attribute for type

						// get timeslot for type
						int curtimeslot;
						if (!CurrentUpdateTimeslot.TryGetValue(deployablebytype.Key, out curtimeslot)) {
							CurrentUpdateTimeslot.Add(deployablebytype.Key, 0);
							curtimeslot = 0;
						}
						
						int updateDelay = updateinfo.updateDelay;

						// max concurrent updates
						// Max number of updates called at the same time for this deployable.  When exceeded, updateDelay is increased 
						if (updateinfo.maxConcurrentUpdates > 0) {
							double concurrent = (double) Math.Ceiling(((double) deployablebytype.Value.Count) / (updateDelay));
							if (concurrent > updateinfo.maxConcurrentUpdates) {
								updateDelay *= (int) Math.Ceiling(concurrent / updateinfo.maxConcurrentUpdates);
							}
						}

						//JInfoAttribute info;
						//DeployableTypes.TryGetValue(deployablebytype.Key, out info);
						//Interface.Oxide.LogInfo($"[JDeployableManager] --- {info.Name} timeslot {curtimeslot + 1} of {updateDelay} ---");

						// update deployables for current time slot
						for (int i = curtimeslot; i < deployablebytype.Value.Count; i += updateDelay) {
							JDeployable dep = deployablebytype.Value[i];
							
							if (dep.Update((now - dep._lastUpdate) * 0.0000001f)) { // convert ticks to seconds
								 
								//Interface.Oxide.LogInfo($"[JDeployableManager] {info.Name} {i+1} of {deployablebytype.Value.Count} updated with delta {(now - dep._lastUpdate) * 0.0000001f}s");

								dep._lastUpdate = now; // if true, set last update
							}
						}

						// set timeslot for next update
						if (curtimeslot + 1 < updateDelay) {
							CurrentUpdateTimeslot[deployablebytype.Key]++;
						} else {
							CurrentUpdateTimeslot[deployablebytype.Key] = 0;
						}

					}
				}
			}

		}

		#endregion

		#region Save and Load

		public class DeployableSaveData {
			public string t;
			public JDeployable.SaveData s;
		}

		public static void LoadDeployables() {
			if (DataManager.data == null || DataManager.data.d == null)
				return;

			int totalloadcount = 0;
			Dictionary<string, int> loadcount = new Dictionary<string, int>();
			
			foreach (var de in DataManager.data.d) {
				
				Type deployabletype;
				JInfoAttribute info;
				if (TryGetType(de.Value.t, out deployabletype) && DeployableTypes.TryGetValue(deployabletype, out info)) {

					if (!loadcount.Keys.Contains(info.Name))
						loadcount.Add(info.Name, 0);
					if (LoadJDeployable(de.Key, de.Value)) {
						loadcount[info.Name]++;
						totalloadcount++;
					} else
						Interface.Oxide.LogWarning($"[JtechCore] Failed to Load Deployable: {de.Value} {de.Key}");
				}
			}

			string top = $"--- {totalloadcount} JDeployable(s) Loaded ---";
			Interface.Oxide.LogInfo($"[JtechCore] {top}");
			foreach (var count in loadcount)
				Interface.Oxide.LogInfo($"[JtechCore] > {count.Value} {count.Key}(s)");
			Interface.Oxide.LogInfo($"[JtechCore] {new String('-', top.Length)}");
		}

		private static bool LoadJDeployable(int id, DeployableSaveData data) {

			Type deployabletype;
			if (!TryGetType(data.t, out deployabletype))
				return false;

			// create instance of deployable
			var instance = Activator.CreateInstance(deployabletype);

			// apply save data to instance
			var savefield = deployabletype.GetField("data");
			if (savefield == null)
				return false;

			savefield.SetValue(instance, data.s);

			// spawn instance
			var methodInfo = deployabletype.GetMethod("Spawn");
			bool spawned = false;
			if (methodInfo != null) {
				try {
					spawned = (bool) methodInfo.Invoke(instance, new object[] { false });
				} catch (Exception e) {
					spawned = false;
					Interface.Oxide.LogWarning($"[JtechCore] Failed to Spawn Deployable: {e.InnerException.Message}");
				}
			}
			if (!spawned) {
				// clean up if deployable
				deployabletype.GetMethod("Kill")?.Invoke(instance, new object[] { BaseNetworkable.DestroyMode.None, false });
				return false;
			}

			// set Id
			var fieldInfo = deployabletype.GetField("Id");
			if (fieldInfo == null)
				return false;
			fieldInfo.SetValue(instance, id);

			// set last update
			var lastupdatefield = deployabletype.GetField("_lastUpdate");
			if (lastupdatefield == null)
				return false;
			lastupdatefield.SetValue(instance, DateTime.Now.Ticks);

			// add to spawnedDeployables
			SpawnedDeployablesAdd(id, (JDeployable) instance, deployabletype);
			
			return true;
		}

		public static void SaveJDeployables() {
			if (DataManager.data == null || DataManager.data.d == null)
				return;

			DataManager.data.d.Clear();

			int totalsavecount = 0;
			Dictionary<string, int> savecount = new Dictionary<string, int>();
			
			foreach (var deployablebytype in spawnedDeployablesByType) {

				JInfoAttribute info;
				if (DeployableTypes.TryGetValue(deployablebytype.Key, out info)) {

					savecount.Add(info.Name, 0);
					foreach (var de in deployablebytype.Value) {
						if (SaveJDeployable(de.Id, de)) {
							totalsavecount++;
							savecount[info.Name]++;
						} else
							Interface.Oxide.LogWarning($"[JtechCore] Failed to Save Deployable: {de} {de.Id}");
					}
				}
			}

			string top = $"--- {totalsavecount} JDeployable(s) Saved ---";
			Interface.Oxide.LogInfo($"[JtechCore] {top}");
			foreach (var count in savecount) {
				if (count.Value > 0)
					Interface.Oxide.LogInfo($"[JtechCore] > {count.Value} {count.Key}(s)");
			}
			Interface.Oxide.LogInfo($"[JtechCore] {new String('-', top.Length)}");
			
		}

		private static bool SaveJDeployable(int id, JDeployable d) {

			DeployableSaveData sd = new DeployableSaveData();
			sd.t = d.ToString();
			sd.s = d.data;
			DataManager.data.d.Add(id, sd);

			return true;
		}

		public static void UnloadJDeployables() {
			foreach (var de in spawnedDeployables) {
				de.Value.Kill(BaseNetworkable.DestroyMode.None, false);
			}
			spawnedDeployables.Clear();
			spawnedDeployablesByType.Clear();
		}

		public static void UnloadJDeployable(int id) {
			JDeployable dep;
			if (spawnedDeployables.TryGetValue(id, out dep))
				UnloadJDeployable(dep);
		}

		public static void UnloadJDeployable(JDeployable dep) {
			dep.Kill();
		}

		public static void RemoveJDeployable(int id) {
			JDeployable dep;
			if (spawnedDeployables.TryGetValue(id, out dep)) {
				SpawnedDeployablesRemove(id, dep);
			}
		}

		#endregion

		#region Deployable Types

		public static Dictionary<Type, JInfoAttribute> DeployableTypes = new Dictionary<Type, JInfoAttribute>();
		public static Dictionary<Type, List<JRequirementAttribute>> DeployableTypeRequirements = new Dictionary<Type, List<JRequirementAttribute>>();
		public static Dictionary<Type, JUpdateAttribute> DeployableTypeUpdates = new Dictionary<Type, JUpdateAttribute>();

		/// <summary>
		/// JDeployable API
		/// Registers JDeployable to the JDeployableManager
		/// </summary>
		/// <typeparam name="T">JDeployable</typeparam>
		public static void RegisterJDeployable<T>() where T : JDeployable {

			// get info attribute
			JInfoAttribute info = (JInfoAttribute) System.Attribute.GetCustomAttribute(typeof(T), typeof(JInfoAttribute));

			if (info == null) {
				Interface.Oxide.LogWarning($"[JtechCore] Failed to register ({typeof(T)}) - Missing JInfoAttribute.");
				return;
			}

			if (DeployableTypes.ContainsKey(typeof(T)) || DeployableTypeRequirements.ContainsKey(typeof(T))) {
				Interface.Oxide.LogWarning($"[JtechCore] [{info.PluginInfo.Title}] {info.Name} has already been registered!");
				return;
			}

			// get requirements attributes
			List<JRequirementAttribute> requirements = System.Attribute.GetCustomAttributes(typeof(T), typeof(JRequirementAttribute)).OfType<JRequirementAttribute>().ToList();

			if (requirements == null || requirements.Count == 0) {
				Interface.Oxide.LogWarning($"[JtechCore] Failed to register ({typeof(T)}) - Missing JRequirementAttribute.");
				return;
			} else if (requirements.Count > 5) {
				Interface.Oxide.LogWarning($"[JtechCore] Failed to register ({typeof(T)}) - More than 5 JRequirementAttribute are not allowed.");
				return;
			}

			requirements.OrderBy(x => x.ItemId); // order requirements by their item id (just like the rust crafting menu)

			// get JUpdate attribute
			JUpdateAttribute jupdate = (JUpdateAttribute) System.Attribute.GetCustomAttribute(typeof(T), typeof(JUpdateAttribute));

			if (jupdate == null) {
				Interface.Oxide.LogWarning($"[JtechCore] Failed to register ({typeof(T)}) - Missing JUpdateAttribute.");
				return;
			} 

			DeployableTypes.Add(typeof(T), info);
			DeployableTypeRequirements.Add(typeof(T), requirements);
			DeployableTypeUpdates.Add(typeof(T), jupdate);
			if (!spawnedDeployablesByType.ContainsKey(typeof(T)))
				spawnedDeployablesByType.Add(typeof(T), new List<JDeployable>());

			Interface.Oxide.LogInfo($"[JtechCore] Registered Deployable: [{info.PluginInfo.Title}] {info.Name}");
			
		}

		/// <summary>
		/// JDeployable API
		/// Unregisters JDeployable from the JDeployableManager
		/// </summary>
		/// <typeparam name="T">JDeployable</typeparam>
		public static void UnregisterJDeployable<T>() where T : JDeployable {

			// get info attribute
			JInfoAttribute info = (JInfoAttribute) System.Attribute.GetCustomAttribute(typeof(T), typeof(JInfoAttribute));

			if (DeployableTypes.Remove(typeof(T)) && DeployableTypeRequirements.Remove(typeof(T)) && DeployableTypeUpdates.Remove(typeof(T))) {
				Interface.Oxide.LogInfo($"[JtechCore] Unregistered Deployable: [{info.PluginInfo.Title}] {info.Name}");
			} else {
				Interface.Oxide.LogInfo($"[JtechCore] Failed to Unregistered Deployable: [{info.PluginInfo.Title}] {info.Name}");
			}
		}

		public static bool TryGetType(string name, out Type deployabletype) {

			foreach (Type type in DeployableTypes.Keys)
				if (type.FullName == name) {
					deployabletype = type;
					return true;
				}

			deployabletype = null;
			return false;
		}

		#endregion

		#region Placing

		private static System.Random IDGenerator = new System.Random();
		private static int NewUID() {
			int id = (int) IDGenerator.Next(0, int.MaxValue);
			if (spawnedDeployables.ContainsKey(id))
				return NewUID();
			else
				return id;
		}

		public static bool PlaceDeployable(Type deployabletype, UserInfo userInfo) {

			var instance = Activator.CreateInstance(deployabletype);

			//var methodInfo = deployabletype.GetMethod("Place");
			//if (!(methodInfo != null && (bool) methodInfo.Invoke(instance, new object[] { userInfo })))
			//	return false;

			// place instance
			var methodInfo = deployabletype.GetMethod("Place");
			bool placed = false;
			if (methodInfo != null) {
				try {
					placed = ((bool) methodInfo.Invoke(instance, new object[] { userInfo }));
				} catch (Exception e) {
					placed = false;
					Interface.Oxide.LogWarning($"[JtechCore] Failed to Place Deployable: {e.InnerException.Message}");
					userInfo.ShowErrorMessage("Failed to Place Deployable", e.InnerException.Message);
				}
			}
			if (!placed) {
				// clean up if deployable spawned anything
				userInfo.ShowErrorMessage("Failed to Spawn Deployable");
				deployabletype.GetMethod("Kill")?.Invoke(instance, new object[] { BaseNetworkable.DestroyMode.None, false });
				return false;
			}

			// create id
			var fieldInfo = deployabletype.GetField("Id");
			if (fieldInfo == null)
				return false;
			int id = NewUID();
			fieldInfo.SetValue(instance, id);

			// set last update
			var lastupdatefield = deployabletype.GetField("_lastUpdate");
			if (lastupdatefield == null)
				return false;
			lastupdatefield.SetValue(instance, DateTime.Now.Ticks);

			SpawnedDeployablesAdd(id, (JDeployable) instance, deployabletype);
			
			return true;
		}

		#endregion
	}

	public class UserInfo : MonoBehaviour {

		public BasePlayer player;
		public InputState input;

		private bool isHoldingHammer;
		private bool isHoldingPlaceholder;
		private bool isDown;
		private Item lastActiveItem;
		private float startPressingTime;

		private string overlay;
		private string messageoverlay;
		private string menu;

		private string currentmessageoverlaytext;
		private string currentmessageoverlaysubtext;
		private bool isOverlayOpen;
		private bool isMenuOpen;
		private Coroutine MessageTextShow;
		private Coroutine MessageTextHide;

		private Coroutine _HidePlaceholder;
		private bool isPlacing;
		private Type placingType;
		public List<BaseEntity> placingSelected;
		private Item placingPlaceholder;
		private BaseEntity placingPlaceholderPlaced;
		private bool placingtookhammer = false;
		private bool movingplaceholder = false;
		private ulong hammerskin;
		private int beltposition;

		/// <summary>
		/// Get/create UserInfo from a BasePlayer.
		/// </summary>
		public static UserInfo Get(BasePlayer basePlayer) {
			return basePlayer.GetComponent<UserInfo>() ?? basePlayer.gameObject.AddComponent<UserInfo>();
		}

		void Awake() {
			player = GetComponent<BasePlayer>();
			input = player.serverInput;
			enabled = true;
			lastActiveItem = null;
			isOverlayOpen = false;
			isMenuOpen = false;
			beltposition = -1;
		}


		/// <summary>
		/// MonoBehavior Update
		/// </summary>
		void Update() {

			// TODO detect when on a pipe and set violationlevel to 0
			//player.violationLevel = 0;
			
			if (player.GetActiveItem() != lastActiveItem) {
				lastActiveItem = player.GetActiveItem();
				OnPlayerActiveItemChanged(lastActiveItem);
			}

			if (!isOverlayOpen && (isHoldingHammer || isPlacing)) {
				if (input.WasJustPressed(BUTTON.FIRE_SECONDARY) && !isDown) {
					startPressingTime = Time.realtimeSinceStartup;
					isDown = true;
				} else if (input.IsDown(BUTTON.FIRE_SECONDARY)) {
					if ((Time.realtimeSinceStartup - startPressingTime) > 0.2f) {
						ShowOverlay();
						isDown = false;
					}
				} else {
					isDown = false;
				}
			}
			
		}

		/// <summary>
		/// Monobehavior OnDestroy
		/// </summary>
		void OnDestroy() {
			DestroyCui();
		}

		#region Hooks

		/// <summary>
		/// When player's held item is changed.
		/// </summary>
		private void OnPlayerActiveItemChanged(Item item) {
			
			isHoldingHammer = item != null && item.info != null && (item.info.name == "hammer.item");
			
			// if player changes held item while placing
			if (item != null && beltposition != -1 && item.position != beltposition) {
				CancelPlacing();
				HideOverlay();
			}
		}

		public bool? CanMoveItem(Item item, int targetSlot) {
			if (isPlacing && beltposition != -1 && (item.position == beltposition || targetSlot == beltposition)) {
				CancelPlacing();
				return false;
			}
			if (isOverlayOpen && item.info != null && item.info.name == "hammer.item") {
				CancelPlacing();
				HideOverlay();
				return false;
			}
			return null;
		}

		/// <summary>
		/// OnHammerHit for this player
		/// </summary>
		public static void OnHammerHit(BasePlayer basePlayer, HitInfo hit) => Get(basePlayer).OnHammerHit(hit);

		/// <summary>
		/// OnHammerHit for this player
		/// </summary>
		public void OnHammerHit(HitInfo hit) {
			if (isPlacing) {
				placingType?.GetMethod("OnPlacingHammerHit")?.Invoke(null, new object[] { this, hit });
			}
		}

		/// <summary>
		/// OnDeployPlaceholder for this player
		/// </summary>
		public static void OnDeployPlaceholder(BasePlayer basePlayer, BaseEntity entity) => Get(basePlayer).OnDeployPlaceholder(entity);

		/// <summary>
		/// OnDeployPlaceholder for this player
		/// </summary>
		public void OnDeployPlaceholder(BaseEntity entity) {
			if (isPlacing && placingPlaceholder != null) {
				placingType?.GetMethod("OnDeployPlaceholder")?.Invoke(null, new object[] { this, entity });
				placingPlaceholder = null;
				placingPlaceholderPlaced = entity;
			}
		}

		#endregion

		#region Crafting

		/// <summary>
		/// Can player craft deployable
		/// </summary>
		/// <param name="jdeployabletype"></param>
		/// <returns></returns>
		public bool CanCraftDeployable(Type jdeployabletype) {

			List<JRequirementAttribute> requirements;
			JDeployableManager.DeployableTypeRequirements.TryGetValue(jdeployabletype, out requirements);

			if (requirements == null) return false;

			foreach (JRequirementAttribute req in requirements) {
				if (!this.HasUsableItem(req.ItemId, req.ItemAmount))
					return false;
			}
			return true;
		}

		/// <summary>
		/// Player has item amount in their inventory
		/// </summary>
		/// <param name="item"></param>
		/// <param name="iAmount"></param>
		/// <returns></returns>
		public bool HasUsableItem(int item, int iAmount) {
			int num = 0;
			foreach (ItemContainer container in player.inventory.crafting.containers)
				num += container.GetAmount(item, true);
			return num >= iAmount;
		}
		
		/// <summary>
		/// Collect required ingredients for deployable
		/// </summary>
		/// <param name="jdeployabletype"></param>
		/// <returns></returns>
		private void CollectIngredients(Type jdeployabletype) {
			
			List<JRequirementAttribute> requirements;
			JDeployableManager.DeployableTypeRequirements.TryGetValue(jdeployabletype, out requirements);

			List<Item> collect = new List<Item>();
			
			foreach (JRequirementAttribute req in requirements) {
				this.CollectIngredient(req.ItemId, req.ItemAmount, collect);
				player.Command($"note.inv {req.ItemId} -{req.ItemAmount}");
			}

			foreach (Item obj in collect)
				obj.Remove(0.0f);
		}

		private void CollectIngredient(int item, int amount, List<Item> collect) {
			foreach (ItemContainer container in player.inventory.crafting.containers) {
				amount -= container.Take(collect, item, amount);
				if (amount <= 0)
					break;
			}
		}

		#endregion

		#region CUI

		/// <summary>
		/// Destroy all userinfo cui for the player
		/// </summary>
		public void DestroyCui() {
			HideMenu();
			HideOverlay();
			HideMessageText();
		}

		/// <summary>
		/// Show overlay menu for the given BasePlayer
		/// </summary>
		public static void ShowOverlay(BasePlayer basePlayer) => Get(basePlayer).ShowOverlay();

		/// <summary>
		/// Show overlay menu for parent player
		/// </summary>
		public void ShowOverlay() {
			HideOverlay(); // just in case
			CancelPlacing(); // cancel placing
			HideMenu();
			
			var elements = new CuiElementContainer();

			overlay = Cui.Menu.CreateOverlay(elements, this);

			CuiHelper.AddUi(player, elements);

			//overlaytext = text;
			//overlaysubtext = subtext;
			isOverlayOpen = true;
			beltposition = player.GetActiveItem().position;
		}

		/// <summary>
		/// Hide overlay menu for the given BasePlayer
		/// </summary>
		public static void HideOverlay(BasePlayer basePlayer) => Get(basePlayer).HideOverlay();

		/// <summary>
		/// Hide overlay menu for parent player
		/// </summary>
		public void HideOverlay() {
			if (!string.IsNullOrEmpty(overlay))
				Game.Rust.Cui.CuiHelper.DestroyUi(player, overlay);
			isOverlayOpen = false;
		}

		/// <summary>
		/// Shows message text for player
		/// </summary>
		/// <param name="message">message text</param>
		/// <param name="submessage">subtext message text</param>
		/// <param name="duration">duration of the message</param>
		/// <param name="delay">delay before showing the message</param>
		public void ShowMessage(string message, string subtext = "", float duration = -1f, float delay = 0f) {

			if (MessageTextShow != null)
				StopCoroutine(MessageTextShow); // cancel previous delayed show

			if (delay > 0) {
				MessageTextShow = StartCoroutine(DelayShow(delay, message, subtext, duration));
			} else {
				ShowMessageText(message, subtext);
			}
			
			if (duration > 0)
				HideMessageText(duration);
		}

		private IEnumerator DelayShow(float delay, string message, string subtext, float duration) {
			yield return new WaitForSecondsRealtime(delay);

			ShowMessage(message, subtext, duration);

			MessageTextShow = null;
		}

		/// <summary>
		/// Shows error message text for player
		/// </summary>
		/// <param name="message">message text</param>
		/// <param name="submessage">subtext message text</param>
		public void ShowErrorMessage(string message, string subtext = "", float duration = 2f) {
			ShowMessageText(message, subtext, "1 0.5 0.2 1");
			if (duration > 0)
				HideMessageText(duration);
		}

		private void ShowMessageText(string text, string subtext = "", string textcolor = "1.0 1.0 1.0 1.0") {

			HideMessageText();

			var elements = new CuiElementContainer();

			messageoverlay = elements.Add(
				Cui.CreatePanel("0.3 0.3", "0.7 0.35", "0 0 0 0")
			);

			elements.Add(
				Cui.AddOutline(
				new CuiLabel {
					Text = { Text = (subtext != "") ? $"{text}\n<size=12>{subtext}</size>" : text, FontSize = 14, Align = TextAnchor.MiddleCenter, Color = textcolor },
					RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
					FadeOut = 2f
				},
				messageoverlay)
			);

			CuiHelper.AddUi(player, elements);

			currentmessageoverlaytext = text;
			currentmessageoverlaysubtext = subtext;
		}

		/// <summary>
		/// Hide current message text for player with optional delay
		/// </summary>
		public void HideMessageText(float delay = 0) {

			if (MessageTextHide != null)
				StopCoroutine(MessageTextHide); // cancel previous delayed hide

			if (delay > 0) {
				string oldoverlay = messageoverlay;
				string beforetext = currentmessageoverlaytext;
				string beforesub = currentmessageoverlaysubtext;
				MessageTextHide = StartCoroutine(DelayHide(delay, oldoverlay, beforetext, beforesub));
			} else {
				if (!string.IsNullOrEmpty(messageoverlay))
					CuiHelper.DestroyUi(player, messageoverlay);
				currentmessageoverlaytext = string.Empty;
				currentmessageoverlaysubtext = string.Empty;
			}
		}

		private IEnumerator DelayHide(float delay, string oldoverlay, string beforetext, string beforesub) {
			yield return new WaitForSecondsRealtime(delay);

			if (!string.IsNullOrEmpty(messageoverlay))
				CuiHelper.DestroyUi(player, messageoverlay);
			if (beforetext == currentmessageoverlaytext)
				currentmessageoverlaytext = string.Empty;
			if (beforesub == currentmessageoverlaysubtext)
				currentmessageoverlaysubtext = string.Empty;

			MessageTextHide = null;
		}

		/// <summary>
		/// Show JDeployable menu for the given BasePlayer
		/// </summary>
		public static void ShowMenu(BasePlayer basePlayer, JDeployable deployable) => Get(basePlayer).ShowMenu(deployable);

		/// <summary>
		/// Show overlay menu for parent player
		/// </summary>
		public void ShowMenu(JDeployable deployable) {
			HideMenu(); // just in case
			CancelPlacing(); // cancel placing
			HideOverlay();

			var elements = new CuiElementContainer();

			menu = Cui.Menu.CreateMenu(elements, this, deployable);

			CuiHelper.AddUi(player, elements);
			
			isMenuOpen = true;
		}

		/// <summary>
		/// Hide overlay menu for the given BasePlayer
		/// </summary>
		public static void HideMenu(BasePlayer basePlayer) => Get(basePlayer).HideMenu();

		/// <summary>
		/// Hide overlay menu for parent player
		/// </summary>
		public void HideMenu() {
			if (!string.IsNullOrEmpty(menu))
				CuiHelper.DestroyUi(player, menu);
			isMenuOpen = false;
		}

		public static void HandleMenuButton(BasePlayer basePlayer, string deployableid, string value) => Get(basePlayer).HandleMenuButton(deployableid, value);

		public void HandleMenuButton(string deployableid, string value) {
			// TODO permissions
			JDeployable deployable;
			if (JDeployableManager.TryGetJDeployable(int.Parse(deployableid), out deployable)) {
				deployable.MenuButtonCallback(this, value);
			}
		}

		public static void HandleMenuOnOffButton(BasePlayer basePlayer, string deployableid) => Get(basePlayer).HandleMenuOnOffButton(deployableid);

		public void HandleMenuOnOffButton(string deployableid) {
			// TODO permissions
			JDeployable deployable;
			if (JDeployableManager.TryGetJDeployable(int.Parse(deployableid), out deployable)) {
				deployable.MenuOnOffButton(this);
			}
		}

		#endregion

		#region Deployable Placing

		/// <summary>
		/// Start placing deployable
		/// </summary>
		public static void StartPlacing(BasePlayer basePlayer, Type deployabletype) => Get(basePlayer).StartPlacing(deployabletype);

		/// <summary>
		/// Start placing deployable
		/// </summary>
		public void StartPlacing(Type deployabletype) {

			// ask deployable type if we can start placing it
			var methodInfo = deployabletype.GetMethod("CanStartPlacing");
			if (methodInfo != null) {
				if (!(bool) methodInfo.Invoke(null, new object[] { this }))
					return;
			}

			HideOverlay();
			HideMenu();

			isPlacing = true;
			placingType = deployabletype;
			placingSelected = new List<BaseEntity>();
			placingPlaceholder = (Item) deployabletype.GetMethod("GetPlaceholderItem")?.Invoke(null, new object[] { this });
			beltposition = player.GetActiveItem().position;

			if (placingPlaceholder != null) {
				ShowPlaceholder();
			}

			deployabletype.GetMethod("OnStartPlacing")?.Invoke(null, new object[] { this });
			
		}

		private void ShowPlaceholder() {
			if (!isPlacing || placingPlaceholder == null || !isHoldingHammer)
				return;

			if (_HidePlaceholder != null)
				StopCoroutine(_HidePlaceholder); // cancel previous

			hammerskin = player.GetActiveItem().skin;
			placingtookhammer = true;
			movingplaceholder = true;
			player.GetActiveItem().Remove();
			placingPlaceholder.MoveToContainer(player.inventory.containerBelt, beltposition);
			movingplaceholder = false;
		}

		private void HidePlaceholder() {

			if (_HidePlaceholder != null)
				StopCoroutine(_HidePlaceholder); // cancel previous
				
			_HidePlaceholder = StartCoroutine(DelayHidePlaceholder());
		}

		private IEnumerator DelayHidePlaceholder() {
			yield return new WaitForSecondsRealtime(0.01f);

			if (placingPlaceholderPlaced != null) {
				placingPlaceholderPlaced.Kill();
			} else if (placingPlaceholder != null) {
				placingPlaceholder.RemoveFromContainer();
			}

			if (placingtookhammer)
				ItemManager.CreateByName("hammer", 1, hammerskin).MoveToContainer(player.inventory.containerBelt, beltposition);
			placingtookhammer = false;
			beltposition = -1;
			placingPlaceholder = null;
			placingPlaceholderPlaced = null;

			_HidePlaceholder = null;
		}

		private void EndPlacing() {

			if (!isPlacing)
				return;
			
			placingType?.GetMethod("OnEndPlacing")?.Invoke(null, new object[] { this });
			
			isPlacing = false;
			placingType = null;
			placingSelected.Clear();

			HidePlaceholder();
		}

		/// <summary>
		/// Cancel placing deployable
		/// </summary>
		public void CancelPlacing() {

			if (!isPlacing)
				return;

			ShowMessage($"Canceled Placing", "", 1);

			EndPlacing();
		}

		/// <summary>
		/// Done placing deployable
		/// </summary>
		public void DonePlacing() {

			if (!isPlacing) 
				return;

			if (CanCraftDeployable(placingType) && JDeployableManager.PlaceDeployable(placingType, this)) { // if player can craft it and it is placed

				CollectIngredients(placingType); // consume ingredients from player's inventory

				JInfoAttribute info;
				JDeployableManager.DeployableTypes.TryGetValue(placingType, out info);

				ShowMessage($"{info.Name} Created", "", 3);
			}

			EndPlacing();
		}

		#endregion

	}


	[AttributeUsage(AttributeTargets.Class)]
	public class JInfoAttribute : Attribute {

		public InfoAttribute PluginInfo { get; }
		public string Name { get; }
		public string IconUrl { get; }
		public string Description { get; }

		/// <summary>
		/// Info about this Custom JDeployable
		/// </summary>
		/// <param name="pluginType">typeof(yourplugin)</param>
		/// <param name="name">Name shown in menus and commands.</param>
		/// <param name="iconUrl">Url for the icon shown in menus. Make it 200x200 with a transparent background.</param>
		public JInfoAttribute(Type pluginType, string name, string iconUrl, string description = null) {
			this.PluginInfo = (InfoAttribute) GetCustomAttribute(pluginType, typeof(InfoAttribute));
			this.Name = name;
			this.IconUrl = iconUrl;
			this.Description = description ?? string.Empty;
		}
	}

	[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
	public class JRequirementAttribute : Attribute {

		public ItemDefinition itemDef { get; }
		public string ItemShortName { get; }
		public int ItemId { get; }
		public int ItemAmount { get; }
		public string PerUnit { get; }

		/// <summary>
		/// Required Item and amount for placing deployable
		/// </summary>
		/// <param name="itemShortName">Shortname of item definition.  Check out the Oxide docs for a list of shortnames.</param>
		/// <param name="itemAmount">Amount required for the item</param>
		/// <param name="perUnit">Unit per amount required (ex. Transport Pipe is itemAmount per "segment")</param>
		public JRequirementAttribute(string itemShortName, int itemAmount = 1, string perUnit = null) {
			this.ItemShortName = itemShortName;
			this.ItemAmount = itemAmount;
			this.PerUnit = perUnit ?? string.Empty;

			this.itemDef = ItemManager.FindItemDefinition(this.ItemShortName);
			this.ItemId = this.itemDef.itemid;
		}

		/// <summary>
		/// Required Item and amount for placing deployable
		/// </summary>
		/// <param name="itemId">itemId of item definition.  Check out the Oxide docs for a list of itemIds.</param>
		/// <param name="itemAmount">Amount required for the item</param>
		/// <param name="perUnit">Unit per amount required (ex. Transport Pipe is itemAmount per "segment")</param>
		public JRequirementAttribute(int itemId, int itemAmount = 1, string perUnit = null) {
			this.ItemId = itemId;
			this.ItemAmount = itemAmount;
			this.PerUnit = perUnit ?? string.Empty;

			this.itemDef = ItemManager.FindItemDefinition(this.ItemId);
			this.ItemShortName = this.itemDef.shortname;
		}
	}

	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
	public class JUpdateAttribute : Attribute {

		public int updateDelay;
		public int maxConcurrentUpdates;

		/// <summary>
		/// Update rate for JDeployable
		/// </summary>
		/// <param name="updateDelay">delay before calling update again</param>
		/// <param name="maxConcurrentUpdates">Max number of updates called at the same time for this deployable.  When exceeded, updateDelay is doubled</param>
		public JUpdateAttribute(int updateDelay, int maxConcurrentUpdates = 10) {
			this.updateDelay = updateDelay;
			this.maxConcurrentUpdates = maxConcurrentUpdates;
		}
	}
}

namespace Oxide.Plugins.JtechCore.Util {

	public static class Icons {

		// list of items with shortnames: https://github.com/OxideMod/Oxide.Docs/blob/master/source/includes/rust/item_list.md
		// item icons: http://rust.wikia.com/wiki/Items

		private readonly static Dictionary<string, string> ItemUrls = new Dictionary<string, string>() {
			// the spacing between means that there are items missing from the list there
			// TODO get more item icons

			{ "autoturret", "http://vignette2.wikia.nocookie.net/play-rust/images/f/f9/Auto_Turret_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "bbq", "https://vignette.wikia.nocookie.net/play-rust/images/f/f8/Barbeque_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "box.repair.bench", "http://vignette1.wikia.nocookie.net/play-rust/images/3/3b/Repair_Bench_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "box.wooden", "http://vignette2.wikia.nocookie.net/play-rust/images/f/ff/Wood_Storage_Box_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "box.wooden.large", "http://vignette1.wikia.nocookie.net/play-rust/images/b/b2/Large_Wood_Box_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "campfire", "http://vignette4.wikia.nocookie.net/play-rust/images/3/35/Camp_Fire_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "ceilinglight", "http://vignette3.wikia.nocookie.net/play-rust/images/4/43/Ceiling_Light_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "cupboard.tool", "http://vignette2.wikia.nocookie.net/play-rust/images/5/57/Tool_Cupboard_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "dropbox", "http://vignette2.wikia.nocookie.net/play-rust/images/4/46/Drop_Box_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "fishtrap.small", "http://vignette2.wikia.nocookie.net/play-rust/images/9/9d/Survival_Fish_Trap_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "flameturret", "http://vignette2.wikia.nocookie.net/play-rust/images/f/f9/Flame_Turret_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "fridge", "http://vignette2.wikia.nocookie.net/play-rust/images/8/88/Fridge_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "furnace", "http://vignette4.wikia.nocookie.net/play-rust/images/e/e3/Furnace_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "furnace.large", "http://vignette3.wikia.nocookie.net/play-rust/images/e/ee/Large_Furnace_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "gears", "https://vignette.wikia.nocookie.net/play-rust/images/7/72/Gears_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "guntrap", "http://vignette2.wikia.nocookie.net/play-rust/images/6/6c/Shotgun_Trap_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "hammer", "http://vignette4.wikia.nocookie.net/play-rust/images/5/57/Hammer_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "jackolantern.angry", "http://vignette4.wikia.nocookie.net/play-rust/images/9/96/Jack_O_Lantern_Angry_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "jackolantern.happy", "http://vignette1.wikia.nocookie.net/play-rust/images/9/92/Jack_O_Lantern_Happy_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "lantern", "http://vignette4.wikia.nocookie.net/play-rust/images/4/46/Lantern_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "metal.fragments", "https://vignette.wikia.nocookie.net/play-rust/images/7/74/Metal_Fragments_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "metal.refined", "https://vignette.wikia.nocookie.net/play-rust/images/a/a1/High_Quality_Metal_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "mining.pumpjack", "http://vignette2.wikia.nocookie.net/play-rust/images/c/c9/Pump_Jack_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "mining.quarry", "http://vignette1.wikia.nocookie.net/play-rust/images/b/b8/Mining_Quarry_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "planter.large", "http://vignette1.wikia.nocookie.net/play-rust/images/3/35/Large_Planter_Box_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "planter.small", "http://vignette3.wikia.nocookie.net/play-rust/images/a/a7/Small_Planter_Box_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "recycler", "http://vignette2.wikia.nocookie.net/play-rust/images/e/ef/Recycler_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "research.table", "http://vignette2.wikia.nocookie.net/play-rust/images/2/21/Research_Table_icon.png/revision/latest/scale-to-width-down/{0}" },
			
			{ "scrap", "https://vignette.wikia.nocookie.net/play-rust/images/0/03/Scrap_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "searchlight", "http://vignette2.wikia.nocookie.net/play-rust/images/c/c6/Search_Light_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "small.oil.refinery", "http://vignette2.wikia.nocookie.net/play-rust/images/a/ac/Small_Oil_Refinery_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "stash.small", "http://vignette2.wikia.nocookie.net/play-rust/images/5/53/Small_Stash_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "stocking.large", "http://vignette1.wikia.nocookie.net/play-rust/images/6/6a/SUPER_Stocking_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "stocking.small", "http://vignette2.wikia.nocookie.net/play-rust/images/9/97/Small_Stocking_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "vending.machine", "http://vignette2.wikia.nocookie.net/play-rust/images/5/5c/Vending_Machine_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "wall.frame.shopfront", "http://vignette4.wikia.nocookie.net/play-rust/images/c/c1/Shop_Front_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "water.barrel", "http://vignette4.wikia.nocookie.net/play-rust/images/e/e2/Water_Barrel_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "water.catcher.large", "http://vignette2.wikia.nocookie.net/play-rust/images/3/35/Large_Water_Catcher_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "water.catcher.small", "http://vignette2.wikia.nocookie.net/play-rust/images/0/04/Small_Water_Catcher_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "water.purifier", "http://vignette3.wikia.nocookie.net/play-rust/images/6/6e/Water_Purifier_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "wood", "https://vignette.wikia.nocookie.net/play-rust/images/f/f2/Wood_icon.png/revision/latest/scale-to-width-down/{0}" },

			{ "xmas.present.large", "http://vignette1.wikia.nocookie.net/play-rust/images/9/99/Large_Present_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "xmas.present.medium", "http://vignette3.wikia.nocookie.net/play-rust/images/6/6b/Medium_Present_icon.png/revision/latest/scale-to-width-down/{0}" },
			{ "xmas.present.small", "http://vignette2.wikia.nocookie.net/play-rust/images/d/da/Small_Present_icon.png/revision/latest/scale-to-width-down/{0}" },

		};


		public static string GetItemIconURL(string name, int size) {
			string url;
			if (ItemUrls.TryGetValue(name, out url)) {
				return string.Format(url, size);
			}
			return string.Empty;
		}

		public static string GetContainerIconURL(BaseEntity e, int size) {

			// TODO if e is JDeployable.Child, get JDeployable url
			// TODO add more containers

			if (e is BoxStorage) {
				string panel = e.GetComponent<StorageContainer>().panelName;
				if (panel == "largewoodbox")
					return GetItemIconURL("box.wooden.large", size);
				return GetItemIconURL("box.wooden", size);

			} else if (e is BaseOven) {
				string panel = e.GetComponent<BaseOven>().panelName;

				if (panel == "largefurnace")
					return GetItemIconURL("furnace.large", size);
				else if (panel == "smallrefinery")
					return GetItemIconURL("small.oil.refinery", size);
				else if (panel == "lantern")
					return GetItemIconURL("lantern", size);
				else if (panel == "bbq")
					return GetItemIconURL("bbq", size);
				else if (panel == "campfire")
					return GetItemIconURL("campfire", size);
				else
					return GetItemIconURL("furnace", size);
			} else if (e is AutoTurret) {
				return GetItemIconURL("autoturret", size);
			} else if (e is Recycler) {
				return GetItemIconURL("recycler", size);
			} else if (e is FlameTurret) {
				return GetItemIconURL("flameturret", size);
			} else if (e is GunTrap) {
				return GetItemIconURL("guntrap", size);
			} else if (e is SearchLight) {
				return GetItemIconURL("searchlight", size);
			} else if (e is WaterCatcher) {
				if (e.GetComponent<WaterCatcher>()._collider.ToString().Contains("small"))
					return GetItemIconURL("water.catcher.small", size);
				return GetItemIconURL("water.catcher.large", size);
			} else if (e is LiquidContainer) {
				if (e.GetComponent<LiquidContainer>()._collider.ToString().Contains("purifier"))
					return GetItemIconURL("water.purifier", size);
				return GetItemIconURL("water.barrel", size);
			} else if (e is VendingMachine) {
				return GetItemIconURL("vending.machine", size);
			} else if (e is DropBox) {
				return GetItemIconURL("dropbox", size);
			} else if (e is StashContainer) {
				return GetItemIconURL("stash.small", size);
			} else if (e is MiningQuarry) {
				if (e.ToString().Contains("pump"))
					return GetItemIconURL("mining.pumpjack", size);
				return GetItemIconURL("mining.quarry", size);
			} else if (e is BuildingPrivlidge) {
				return GetItemIconURL("cupboard.tool", size);
			}

			return "http://i.imgur.com/BwJN0rt.png";
		}

	}

}

namespace Oxide.Plugins.JtechDeployables {
	
	[JInfo(typeof(Jtech), "Assembler", "https://i.imgur.com/R9mD3VQ.png", "This high-tech machine can assemble any item from it's blueprint with the item's ingredients and some low grade fuel.")]
	[JRequirement("vending.machine"), JRequirement("gears", 5), JRequirement("metal.refined", 20)]
	[JUpdate(10, 5)]

	public class Assembler : JDeployable {

		VendingMachine vendingMachine;

		public new static void OnStartPlacing(UserInfo userInfo) {
			userInfo.ShowMessage("Placing Assembler");
		}

		public new static Item GetPlaceholderItem(UserInfo userInfo) {
			// vending machine with assembler skin
			return ItemManager.CreateByName("vending.machine", 1, 1224412227);
		}

		public static void OnDeployPlaceholder(UserInfo userInfo, BaseEntity baseEntity) {
			// save the deployed placeholder
			userInfo.placingSelected = new List<BaseEntity> { baseEntity };
			userInfo.DonePlacing();
		}

		public override bool Place(UserInfo userInfo) {

			if (userInfo.placingSelected == null || userInfo.placingSelected.Count != 1)
				return false;

			data = new SaveData();
			data.SetUser(userInfo);
			
			BaseEntity placeholder = userInfo.placingSelected[0];

			SetHealth(placeholder.Health()); // set health based on placeholder
			data.SetTransform(placeholder.transform);
			
			if (!Spawn())
				return false;

			Effect.server.Run("assets/bundled/prefabs/fx/build/promote_metal.prefab", GetEntities()[0], 0U, Vector3.zero, Vector3.zero);

			return true;
		}

		public override bool Spawn(bool placing = false) {

			// spawn new vending machine
			BaseEntity ent = GameManager.server.CreateEntity("assets/prefabs/deployable/vendingmachine/vendingmachine.deployed.prefab", data.GetPosition(), data.GetRotation());

			vendingMachine = ent.GetComponent<VendingMachine>();
			if (vendingMachine == null)
				return false;

			vendingMachine.skinID = 1224412227;
			vendingMachine.Spawn();
			vendingMachine.shopName = "Assembler";
			vendingMachine.SetFlag(BaseEntity.Flags.Reserved4, false, false);
			vendingMachine.UpdateMapMarker();

			SetBlueprint("gears");

			SetMainParent((BaseCombatEntity) ent);

			//DroppedItemContainer container = (DroppedItemContainer) GameManager.server.CreateEntity("assets/prefabs/misc/item drop/item_drop.prefab", Vector3.zero);
			//if (container == null)
			//	return false;

			//container.playerName = "name test";
			//container.enableSaving = false;
			//container.Spawn();

			//container.TakeFrom(new ItemContainer());

			//AddChildEntity((BaseCombatEntity) container);


			return true;
		}

		public void SetBlueprint(string shortname) {

			vendingMachine.sellOrders.sellOrders.Clear();
			vendingMachine.inventory.Clear();

			if (shortname != string.Empty) {
				ItemDefinition itemdef = ItemManager.FindItemDefinition(shortname);
				if (itemdef == null)
					return;
				vendingMachine.sellOrders.sellOrders.Clear();
				vendingMachine.sellOrders.sellOrders.Add(new ProtoBuf.VendingMachine.SellOrder() {
					ShouldPool = false,
					itemToSellID = itemdef.itemid,
					itemToSellAmount = Mathf.Clamp(1, 1, itemdef.stackable),
					currencyID = itemdef.itemid,
					currencyAmountPerItem = Mathf.Clamp(1, 1, 10000),
					itemToSellIsBP = true,
					currencyIsBP = false,
				});

				Item item = ItemManager.CreateByName("blueprintbase", 1);
				item.blueprintTarget = itemdef.itemid;
				item.MoveToContainer(vendingMachine.inventory);
			}
			vendingMachine.RefreshSellOrderStockLevel(null);

			vendingMachine.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
		}

		#region Hooks

		public override bool? CanAdministerVending(VendingMachine machine, BasePlayer player) {
			ShowMenu(player);
			return false;
		}

		public override bool? CanUseVending(VendingMachine machine, BasePlayer player) {
			ShowMenu(player);
			return false;
		}

		public override bool? CanVendingAcceptItem(VendingMachine machine, Item item) {
			// TODO
			// accept items into input storage
			return null;
		}

		public override object OnRotateVendingMachine(VendingMachine machine, BasePlayer player) {
			machine.transform.rotation = Quaternion.LookRotation(-machine.transform.forward, machine.transform.up);
			data.SetTransform(machine.transform);
			machine.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
			return false;
		}

		public override void OnToggleVendingBroadcast(VendingMachine machine, BasePlayer player) {
			// disable broadcast
			vendingMachine.SetFlag(BaseEntity.Flags.Reserved4, false, false);
			vendingMachine.UpdateMapMarker();
			ShowMenu(player);
		}
		
		#endregion


		public override List<Cui.ButtonInfo> GetMenuButtons(UserInfo userInfo) {
			return new List<Cui.ButtonInfo>() {
			};
		}

		public override void MenuButtonCallback(UserInfo player, string value) {

		}
	}

	[JInfo(typeof(Jtech), "Auto Farm", "https://i.imgur.com/lEXshkx.png")]
	[JRequirement("scrap", 10)]

	public class AutoFarm : JDeployable {



	}

	[JInfo(typeof(Jtech), "Transport Pipe", "https://vignette.wikia.nocookie.net/play-rust/images/4/4a/Metal_Pipe_icon.png/revision/latest/scale-to-width-down/200", "Transfers items or liquids between containers.  Upgrade it with the hammer to increase the flow rate and functionality.")]
	[JRequirement("wood", 20, "segment")]
	[JUpdate(4, 16)]

	public class TransportPipe : JDeployable {
		
		// TODO Item Filter (add container management to JDeployable)
		// TODO Fueling Mode
		// TODO Furnace Splitter and cui

		public static List<int> flowrates = new List<int>() { 1, 5, 10, 30, 50 };
		public static string[] upgradeeffect = new string[] {
			"assets/bundled/prefabs/fx/build/promote_wood.prefab",
			"assets/bundled/prefabs/fx/build/promote_wood.prefab",
			"assets/bundled/prefabs/fx/build/promote_stone.prefab",
			"assets/bundled/prefabs/fx/build/promote_metal.prefab",
			"assets/bundled/prefabs/fx/build/promote_toptier.prefab",
		};

		public enum Mode {
			MultiStack,  // multiple stacks per item
			SingleStack, // one stack per item
			SingleItem,  // only one of each item
			Fueling,
			Count = 4
		}

		public static string[] ModeNames = new string[] {
			"Multi Stack",
			"Single Stack",
			"Single Item",
			"Fueling"
		};

		// these are just cached values that will not be saved

		public StorageContainer sourcecont;
		public StorageContainer destcont;
		private uint sourcechildid;
		private uint destchildid;
		public string sourceContainerIconUrl;
		public string destContainerIconUrl;
		public Vector3 startPosition;
		public Vector3 endPosition;
		private float distance;
		public bool isWaterPipe;
		private bool destisstartable;
		private int flowrate;
		private Mode mode;

		private static float pipesegdist = 3;
		private static Vector3 pipefightoffset = new Vector3(0.001f, 0, 0.001f); // every other pipe segment is offset by this to remove z fighting


		public new static bool CanStartPlacing(UserInfo userInfo) {
			return true;
		}

		public new static void OnStartPlacing(UserInfo userInfo) {
			userInfo.placingSelected = new List<BaseEntity>() { null, null };

			userInfo.ShowMessage("Select first container");
		}
 
		public new static void OnPlacingHammerHit(UserInfo userInfo, HitInfo hit) {

			StorageContainer cont = hit.HitEntity.GetComponent<StorageContainer>();

			if (cont != null) { // we hit a StorageContainer
				
				if (CheckContPrivilege(cont, userInfo.player)) { // permission for this container

					if (userInfo.placingSelected[0] == null) { // if this is the first we hit
						userInfo.placingSelected[0] = hit.HitEntity;

						userInfo.ShowMessage("Select second container");

					} else if (userInfo.placingSelected[1] == null) { // if this is the second we hit
						if (userInfo.placingSelected[0] != hit.HitEntity) { // if it's not the same as the first one
							if (userInfo.placingSelected[0] is LiquidContainer == hit.HitEntity is LiquidContainer) { // if they are the same type of container
								if (!isPipeOverlapping(userInfo.placingSelected[0], hit.HitEntity)) { // if not overlapping

									userInfo.placingSelected[1] = hit.HitEntity;
									userInfo.DonePlacing();

								} else {
									userInfo.ShowErrorMessage("overlap error");
									userInfo.ShowMessage("Select second container", "", -1, 2f);
								}
							} else {
								userInfo.ShowErrorMessage("same container error");
								userInfo.ShowMessage("Select second container", "", -1, 2f);
							}
						} else {
							userInfo.ShowErrorMessage("same container error");
							userInfo.ShowMessage("Select second container", "", -1, 2f);
						}
					}
				} else {
					// TODO no privilege error message
				}
				
			}
		}

		public override bool Place(UserInfo userInfo) {
			
			data = new SaveData();
			data.SetUser(userInfo);

			uint scid;
			uint dcid;
			data.Set("sourceid", GetIdFromContainer(userInfo.placingSelected[0], out scid));
			data.Set("destid", GetIdFromContainer(userInfo.placingSelected[1], out dcid));
			data.Set("sourcechildid", scid);
			data.Set("destchildid", dcid);

			data.Set("grade", "0");
			data.Set("mode", "0");

			return Spawn(true);
		}

		public override void OnHammerHit(BasePlayer player, HitInfo hit) {
			ShowMenu(player);
		}

		public override bool? OnStructureUpgrade(Child child, BasePlayer player, BuildingGrade.Enum grade) {

			var ents = GetEntities();
			for (int i = 0; i < ents.Count; i++) {

				BuildingBlock b = ents[i].gameObject.GetComponent<BuildingBlock>();
				ents[i].gameObject.GetComponent<Child>()?.RunDelayed(i * 0.25f, () => {
					if (b == null)
						return;
					b.SetGrade(grade);
					b.SetHealthToMax();
					b.SendNetworkUpdate(BasePlayer.NetworkQueue.UpdateDistance);
					Effect.server.Run(upgradeeffect[(int) grade], b.transform.position + (b.transform.up * 1.5f), Vector3.up);
				});
			}

			data.Set("grade", ((int) grade).ToString());
			flowrate = flowrates[(int) grade];

			return null;
		}

		public override bool Spawn(bool placing = false) {
			
			if (!(data.Has("sourceid", "destid", "sourcechildid", "destchildid")))
				return false;

			uint sourceid = uint.Parse(data.Get("sourceid"));
			uint destid = uint.Parse(data.Get("destid"));
			sourcechildid = uint.Parse(data.Get("sourcechildid"));
			destchildid = uint.Parse(data.Get("destchildid"));
			
			sourcecont = GetChildContainer(BaseNetworkable.serverEntities.Find(sourceid), sourcechildid);
			destcont = GetChildContainer(BaseNetworkable.serverEntities.Find(destid), destchildid);

			if (sourcecont == null || destcont == null || sourcecont == destcont)
				return false;

			sourceContainerIconUrl = Icons.GetContainerIconURL(sourcecont, 100);
			destContainerIconUrl = Icons.GetContainerIconURL(destcont, 100);

			isWaterPipe = sourcecont is LiquidContainer;
			destisstartable = isStartable(destcont);
			flowrate = flowrates[int.Parse(data.Get("grade", "0"))];
			mode = (Mode) int.Parse(data.Get("mode", "0"));

			startPosition = sourcecont.CenterPoint() + ContainerOffset(sourcecont);
			endPosition = destcont.CenterPoint() + ContainerOffset(destcont);

			distance = Vector3.Distance(startPosition, endPosition);
			Quaternion rotation = Quaternion.LookRotation(endPosition - startPosition) * Quaternion.Euler(90, 0, 0);

			//isStartable();

			// spawn pillars

			int segments = (int) Mathf.Ceil(distance / pipesegdist);
			float segspace = (distance - pipesegdist) / (segments - 1);

			for (int i = 0; i < segments; i++) {

				// create pillar

				BaseEntity ent;

				if (i == 0) {
					// the position thing centers the pipe if there is only one segment
					ent = GameManager.server.CreateEntity("assets/prefabs/building core/pillar/pillar.prefab", (segments == 1) ? (startPosition + ((rotation * Vector3.up) * ((distance - pipesegdist) * 0.5f))) : startPosition, rotation);
					SetMainParent((BaseCombatEntity) ent);
				} else {
					ent = GameManager.server.CreateEntity("assets/prefabs/building core/pillar/pillar.prefab", Vector3.up * (segspace * i) + ((i % 2 == 0) ? Vector3.zero : pipefightoffset));
					//ent = GameManager.server.CreateEntity("assets/prefabs/building core/pillar/pillar.prefab", startPosition);
				}

				ent.enableSaving = false;

				BuildingBlock block = ent.GetComponent<BuildingBlock>();

				if (block != null) {
					block.grounded = true;
					block.grade = (BuildingGrade.Enum) int.Parse(data.Get("grade", "0"));
					block.enableSaving = false;
					block.Spawn();
					block.SetHealthToMax();
				} else
					return false;
				
				
				//((DecayEntity) ent).GetNearbyBuildingBlock();
				
				if (i != 0) {

					if (placing) { // placing animation
						ent.gameObject.AddComponent<Child>()?.RunDelayed(i * 0.25f, () => {
							AddChildEntity((BaseCombatEntity) ent);
							Effect.server.Run("assets/bundled/prefabs/fx/build/promote_wood.prefab", ent.transform.position + (ent.transform.up * (segspace * 0.5f)), Vector3.up);
						});
					} else {
						AddChildEntity((BaseCombatEntity) ent);
					}
				}
				
				// xmas lights

				//BaseEntity lights = GameManager.server.CreateEntity("assets/prefabs/misc/xmas/christmas_lights/xmas.lightstring.deployed.prefab", (Vector3.up * pipesegdist * 0.5f) + (Vector3.forward * 0.13f) + (Vector3.up * (segspace * i) + ((i % 2 == 0) ? Vector3.zero : pipefightoffset)), Quaternion.Euler(0, -60, 90));
				//lights.enableSaving = false;
				//lights.Spawn();
				//lights.SetParent(mainparent);
				//jPipeSegChildLights.Attach(lights, this);

			}

			if (placing) {
				SetHealth(GetEntities()[0].MaxHealth());
			} else
				SetHealth(data.health);

			return true;
		}

		public override bool Update(float timeDelta) {
			
			// if container is destroyed, kill pipe
			if (sourcecont == null || destcont == null) {
				Kill(BaseNetworkable.DestroyMode.Gib);
				return false;
			}
			
			if (data.isEnabled) {
				
				if (sourcecont.inventory.itemList.Count > 0 && sourcecont.inventory.itemList[0] != null) {

					int amounttotake = Mathf.FloorToInt(timeDelta * flowrate);

					if (amounttotake < 1)
						return false;

					if (isWaterPipe) { // water pipe

						Item itemtomove = sourcecont.inventory.itemList[0];

						if (destcont.inventory.itemList.Count == 1) {
							Item slot = destcont.inventory.itemList[0];

							if (slot.CanStack(itemtomove)) {

								int maxstack = slot.MaxStackable();
								if (slot.amount < maxstack) {
									if ((maxstack - slot.amount) < amounttotake)
										amounttotake = maxstack - slot.amount;
									MoveItem(itemtomove, amounttotake, destcont, -1);
								}
							}
						} else {
							MoveItem(itemtomove, amounttotake, destcont, -1);
						}

					} else { // item pipe

						Item itemtomove = FindItem();

						// move the item
						if (itemtomove != null && CanAcceptItem(itemtomove)) {

							if (mode == Mode.SingleStack) {

								Item slot = destcont.inventory.FindItemsByItemID(itemtomove.info.itemid).OrderBy<Item, int>((Func<Item, int>) (x => x.amount)).FirstOrDefault<Item>();

								if (slot != null) { // if there is already a stack of itemtomove in destcontainer
									if (slot.CanStack(itemtomove)) { // can we stack this item?

										int maxstack = slot.MaxStackable();
										if (slot.amount < maxstack) {
											if ((maxstack - slot.amount) < amounttotake)
												amounttotake = maxstack - slot.amount; // amount to add to make it to max stack size
																					   //pipe.moveitem(itemtomove, amounttotake, pipe.destcont, (pipe.fsplit) ? pipe.fsstacks : -1);
											MoveItem(itemtomove, amounttotake, destcont, -1);
											TurnOnDest();
										}
									}
								} else {
									//pipe.moveitem(itemtomove, amounttotake, pipe.destcont, (pipe.fsplit) ? pipe.fsstacks : -1);
									MoveItem(itemtomove, amounttotake, destcont, -1);
									TurnOnDest();
								}
							} else if (mode == Mode.SingleItem) {
								Item slot = destcont.inventory.FindItemsByItemID(itemtomove.info.itemid).OrderBy<Item, int>((Func<Item, int>) (x => x.amount)).FirstOrDefault<Item>();

								if (slot == null) {
									//pipe.moveitem(itemtomove, amounttotake, pipe.destcont, (pipe.fsplit) ? pipe.fsstacks : -1);
									MoveItem(itemtomove, 1, destcont, -1);
									TurnOnDest();
								}
							} else if (mode == Mode.Fueling) {
								Item slot = destcont.inventory.FindItemsByItemID(itemtomove.info.itemid).OrderBy<Item, int>((Func<Item, int>) (x => x.amount)).FirstOrDefault<Item>();

								if (slot == null) {
									//pipe.moveitem(itemtomove, amounttotake, pipe.destcont, (pipe.fsplit) ? pipe.fsstacks : -1);
									MoveItem(itemtomove, 1, destcont, -1);
									TurnOnDest();
								}
							} else if (mode == Mode.MultiStack) {
								MoveItem(itemtomove, amounttotake, destcont, -1);
								TurnOnDest();
							}
						}

					}
				}


				
			}

			return true;
		}

		private static void MoveItem(Item itemtomove, int amounttotake, StorageContainer cont, int stacks) {

			if (itemtomove.amount > amounttotake)
				itemtomove = itemtomove.SplitItem(amounttotake);

			//if ((BaseEntity) cont is BaseOven && stacks > -1) {
			//	if (FurnaceSplitter != null)
			//		FurnaceSplitter?.Call("MoveSplitItem", itemtomove, (BaseEntity) cont, stacks);
			//	else
			//		itemtomove.MoveToContainer(cont.inventory);
			//} else {
			itemtomove.MoveToContainer(cont.inventory);
			//}
		}

		// TODO this should probably be renamed or moved inline
		private bool CanAcceptItem(Item itemtomove) {
			return destcont.inventory.CanAcceptItem(itemtomove, -1) == ItemContainer.CanAcceptResult.CanAccept && destcont.inventory.CanTake(itemtomove);
		}

		private Item FindItem() {

			foreach (Item i in sourcecont.inventory.itemList) { // for each item in source container
				//if (filteritems.Count == 0 || filteritems.Contains(i.info.itemid)) { // if filter is empty or contains this item
					if (!(sourcecont is Recycler) || (sourcecont is Recycler && i.position > 5)) { // if source is recycler then only take items from the output

						if (destcont is BaseOven) { // only send Burnable or Cookable to BaseOven
							if ((i.info.GetComponent<ItemModBurnable>()) || (i.info.GetComponent<ItemModCookable>()))
								return i;
						} else if (destcont is Recycler) { // only send recyclables to recycler
							if (i.info.Blueprint != null)
								return i;
						} else {
							return i;
						}
					}
				//}
			}
			return null;
		}

		private static bool CheckContPrivilege(StorageContainer cont, BasePlayer p) => cont.CanOpenLootPanel(p) && CheckBuildingPrivilege(p);

		private static bool CheckBuildingPrivilege(BasePlayer p) {
			//if (permission.UserHasPermission(p.UserIDString, "jpipes.admin"))
			//	return true;
			return p.CanBuild();
		}
		
		private static bool isPipeOverlapping(BaseEntity sourcecont, BaseEntity destcont) {
			
			uint s = sourcecont.net.ID;
			uint d = destcont.net.ID;

			List<JDeployable> pipes = JDeployableManager.GetSpawned<TransportPipe>();
			if (pipes.Count == 0)
				return false;

			foreach (TransportPipe p in pipes) {
				if ((p.sourcecont.net.ID == s && p.destcont.net.ID == d) || (p.sourcecont.net.ID == d && p.destcont.net.ID == s))
					return true;
			}
			return false;
		}

		// find storage container from id and child id
		private static StorageContainer GetContainerFromId(uint id, uint cid = 0) => GetChildContainer(BaseNetworkable.serverEntities.Find(id), cid);

		// find storage container from parent and child id
		private static StorageContainer GetChildContainer(BaseNetworkable parent, uint id = 0) {
			if (id != 0) {
				BaseResourceExtractor ext = parent?.GetComponent<BaseResourceExtractor>();
				if (ext != null) {
					foreach (var c in ext.children) {
						if (c is ResourceExtractorFuelStorage && c.GetComponent<ResourceExtractorFuelStorage>().panelName == ((id == 2) ? "fuelstorage" : "generic"))
							return c.GetComponent<StorageContainer>();
					}
				}
				//return parent.GetComponent<StorageContainer>();
			}
			return parent?.GetComponent<StorageContainer>();
		}

		private static uint GetIdFromContainer(BaseEntity cont, out uint cid) {

			ResourceExtractorFuelStorage stor = cont.GetComponent<ResourceExtractorFuelStorage>();

			if (stor != null) {
				switch (stor.panelName) {
					case "generic":
						cid = 1;
						break;
					case "fuelstorage":
						cid = 2;
						break;
					default:
						cid = 0;
						break;
				}

				return stor.parentEntity.uid;
			}

			cid = 0;
			return cont.net.ID;
		}

		private static Vector3 ContainerOffset(BaseEntity e) {
			if (e is BoxStorage)
				return Vector3.zero;
			else if (e is BaseOven) {
				string panel = e.GetComponent<BaseOven>().panelName;

				if (panel == "largefurnace")
					return Vector3.up * -1.5f;
				else if (panel == "smallrefinery")
					return e.transform.rotation * new Vector3(-1, 0, -0.1f);
				else if (panel == "bbq")
					return Vector3.up * 0.03f;
				else
					return Vector3.up * -0.3f;
				//} else if (e is ResourceExtractorFuelStorage) {
				//if (e.GetComponent<StorageContainer>().panelName == "fuelstorage") {
				//    return contoffset.pumpfuel;
				//} else {
				//    return e.transform.rotation * contoffset.pumpoutput;
				//}
			} else if (e is AutoTurret) {
				return Vector3.up * -0.58f;
			} else if (e is SearchLight) {
				return Vector3.up * -0.5f;
			} else if (e is WaterCatcher) {
				return Vector3.up * -0.6f;
			} else if (e is LiquidContainer) {
				if (e.GetComponent<LiquidContainer>()._collider.ToString().Contains("purifier"))
					return Vector3.up * 0.25f;
				return Vector3.up * 0.2f;
			}
			return Vector3.zero;
		}
		private bool isStartable(BaseEntity e) => e is BaseOven || e is Recycler || destchildid == 2;

		

		private void TurnOnDest() {
			if (!bool.Parse(data.Get("autostart", "false")) || !destisstartable)
				return;

			BaseEntity e = destcont;
			if (e is BaseOven) {
				e.GetComponent<BaseOven>().StartCooking();
			} else if (e is Recycler) {
				e.GetComponent<Recycler>().StartRecycling();
			} else if (destchildid == 2) {
				BaseEntity ext = (BaseEntity) BaseNetworkable.serverEntities.Find(e.parentEntity.uid);
				if (ext != null)
					ext.GetComponent<MiningQuarry>().EngineSwitch(true);
			}
		}

		private void ChangeDirection() {
			
			uint sourceid = uint.Parse(data.Get("destid"));
			uint destid = uint.Parse(data.Get("sourceid"));
			sourcechildid = uint.Parse(data.Get("destchildid"));
			destchildid = uint.Parse(data.Get("sourcechildid"));
			
			sourcecont = GetChildContainer(BaseNetworkable.serverEntities.Find(sourceid), sourcechildid);
			destcont = GetChildContainer(BaseNetworkable.serverEntities.Find(destid), destchildid);

			if (sourcecont == null || destcont == null)
				return;

			sourceContainerIconUrl = Icons.GetContainerIconURL(sourcecont, 100);
			destContainerIconUrl = Icons.GetContainerIconURL(destcont, 100);

			uint scid;
			uint dcid;
			data.Set("sourceid", GetIdFromContainer(sourcecont, out scid));
			data.Set("destid", GetIdFromContainer(destcont, out dcid));
			data.Set("sourcechildid", scid);
			data.Set("destchildid", dcid);

			destisstartable = isStartable(destcont);

			if (!destisstartable && mode == Mode.Fueling) {
				mode = 0;
				data.Set("mode", "0");
			}

			UpdateMenu();
		}

		private void NextMode() {

			mode = (mode == Mode.Count - 1 || // if next mode is count
				(!destisstartable && mode == Mode.Fueling - 1)) ?  // if next mode is fueling and dest is not startable
				0 : mode + 1;
			data.Set("mode", (int) mode);

			UpdateMenu();
		}

		private void ToggleAutoStarter() {
			data.Set("autostart", !bool.Parse(data.Get("autostart", "false")));

			UpdateMenu();
		}

		#region CUI
		
		public override void GetMenuContent(CuiElementContainer elements, string parent, UserInfo userInfo) {

			//TODO show if dest is running

			// main/parent is always at a 1:1 aspect ratio to make sizing easier
			string main = elements.Add(
				new CuiPanel {
					Image = { Color = "0 0 0 0" },
					RectTransform = { AnchorMin = "0 0", AnchorMax = "1 1" },
				}, parent
			);

			float pipey = 0.8f;
			float pipewidth = 0.275f;
			float pipeheight = 0.0275f;
			float arrowoffset = 0.005f;
			float conticonsize = 0.125f;

			// slight outline around the flowpipe
			Cui.FakeDropShadow(elements, main, 0.5f - pipewidth, pipey - pipeheight, 0.5f + pipewidth, pipey + pipeheight, 0f, 0.01f, 1, $"{Cui.Colors.Blue} 0.1");

			string flowpipe = elements.Add(
				new CuiPanel {
					Image = { Color = $"{Cui.Colors.Blue} 0.5" },
					RectTransform = { AnchorMin = $"{0.5f - pipewidth} {pipey - pipeheight}", AnchorMax = $"{0.5f + pipewidth} {pipey + pipeheight}" },
				}, main
			);

			elements.Add(
				Cui.AddOutline(
				new CuiLabel {
					Text = { Text = new String('>', int.Parse(data.Get("grade", "0")) + 1), FontSize = 20, Align = TextAnchor.MiddleCenter, Color = "1 1 1 1" },
					RectTransform = { AnchorMin = $"{0.5f - pipewidth} {pipey - pipeheight * 2 + arrowoffset}", AnchorMax = $"{0.5f + pipewidth} {pipey + pipeheight * 2 + arrowoffset}" }
				}, main, $"{Cui.Colors.DarkBlue} 0.8")
			);

			elements.Add(
				Cui.CreateIcon(main, $"{0.5f - pipewidth - conticonsize} {pipey - conticonsize}", $"{0.5f - pipewidth + conticonsize} {pipey + conticonsize}", sourceContainerIconUrl)
			);
			elements.Add(
				Cui.CreateIcon(main, $"{0.5f + pipewidth - conticonsize} {pipey - conticonsize}", $"{0.5f + pipewidth + conticonsize} {pipey + conticonsize}", destContainerIconUrl)
			);
			
			float separator = 0.25f;
			float separatorright = 0.75f;
			float gap = 0.015f;
			float lineheight = 0.07f;

			Dictionary<string, string> info = GetMenuInfo(userInfo);

			float topheight = 0.075f;
			//float infoy = (info.Count * lineheight) * 0.5f + 0.03f + topheight;
			float infoyoffset = 0.33f;
			float infoy = (info.Count * lineheight) * 0.5f + 0.03f + topheight + infoyoffset;

			string infobg = elements.Add(
				new CuiPanel {
					Image = { Color = "0.251 0.769 1 0.25" },
					RectTransform = { AnchorMin = $"0 {infoyoffset}", AnchorMax = $"0.996 {infoy}" },
				}, main
			);

			// info top drop shadow
			elements.Add(
				new CuiPanel {
					Image = { Color = "0.004 0.341 0.608 0.15" },
					RectTransform = { AnchorMin = $"0 {infoy - topheight - 0.008f}", AnchorMax = $"0.996 {infoy}" },
				}, main
			);

			elements.Add(
				new CuiPanel {
					Image = { Color = "0.004 0.341 0.608 0.15" },
					RectTransform = { AnchorMin = $"0 {infoy - topheight - 0.016f}", AnchorMax = $"0.996 {infoy}" },
				}, main
			);

			// info top area
			string infotop = elements.Add(
				new CuiPanel {
					Image = { Color = "0.251 0.769 1 0.2" },
					RectTransform = { AnchorMin = $"0 {infoy - topheight}", AnchorMax = $"0.996 {infoy}" },
				}, main
			);

			elements.Add(
				new CuiLabel {
					Text = { Text = $"INFORMATION", FontSize = 12, Align = TextAnchor.MiddleLeft, Color = "1 1 1 0.75" },
					RectTransform = { AnchorMin = "0.03 0", AnchorMax = "1 1" }
				}, infotop
			);


			// Deployable Info
			// left
			for (int i = 0; i < info.Count; i+=2) {

				elements.Add(
					new CuiLabel {
						Text = { Text = info.Keys.ElementAt(i), FontSize = 12, Align = TextAnchor.MiddleRight, Color = "1 1 1 0.5" },
						RectTransform = { AnchorMin = $"0 {infoy - topheight - gap - ((lineheight * 0.5f) * i) - lineheight}", AnchorMax = $"{separator - gap} {infoy - topheight - gap - ((lineheight * 0.5f) * i)}" }
					}, main
				);
				elements.Add(
					new CuiLabel {
						Text = { Text = info.Values.ElementAt(i), FontSize = 12, Align = TextAnchor.MiddleLeft, Color = "1 1 1 0.9" },
						RectTransform = { AnchorMin = $"{separator + gap} {infoy - topheight - gap - ((lineheight * 0.5f) * i) - lineheight}", AnchorMax = $"1 {infoy - topheight - gap - ((lineheight * 0.5f) * i)}" }
					}, main
				);
			}
			// right
			for (int i = 1; i < info.Count; i+=2) {

				elements.Add(
					new CuiLabel {
						Text = { Text = info.Keys.ElementAt(i), FontSize = 12, Align = TextAnchor.MiddleRight, Color = "1 1 1 0.5" },
						RectTransform = { AnchorMin = $"0 {infoy - topheight - gap - ((lineheight * 0.5f) * (i - 1)) - lineheight}", AnchorMax = $"{separatorright - gap} {infoy - topheight - gap - ((lineheight * 0.5f) * (i - 1))}" }
					}, main
				);
				elements.Add(
					new CuiLabel {
						Text = { Text = info.Values.ElementAt(i), FontSize = 12, Align = TextAnchor.MiddleLeft, Color = "1 1 1 0.9" },
						RectTransform = { AnchorMin = $"{separatorright + gap} {infoy - topheight - gap - ((lineheight * 0.5f) * (i - 1)) - lineheight}", AnchorMax = $"1 {infoy - topheight - gap - ((lineheight * 0.5f) * (i - 1))}" }
					}, main
				);
			}
		}

		public override Dictionary<string, string> GetMenuInfo(UserInfo userInfo) {
			Dictionary<string, string> info = base.GetMenuInfo(userInfo);

			info.Add("Flowrate", isWaterPipe ? $"{flowrate} ml/sec" : $"{flowrate} items/sec");
			info.Add("Length", Math.Round(distance, 2).ToString());
			
			return info;
		}

		public override List<Cui.ButtonInfo> GetMenuButtons(UserInfo userInfo) {
			return data.Get("grade") == "0" ? new List<Cui.ButtonInfo>() { // if twig
				new Cui.ButtonInfo("Change Direction", "changedir"),
				new Cui.ButtonInfo(ModeNames[(int) mode], "mode"),
			} : new List<Cui.ButtonInfo>() { // not twig
				new Cui.ButtonInfo("Auto Starter", "autostarter", bool.Parse(data.Get("autostart", "false")), destisstartable ? Cui.ButtonInfo.ButtonState.Enabled : Cui.ButtonInfo.ButtonState.Disabled),
				new Cui.ButtonInfo("Change Direction", "changedir"),
				new Cui.ButtonInfo(ModeNames[(int) mode], "mode"),
				new Cui.ButtonInfo("Item Filter", "filter", mode == Mode.Fueling ? Cui.ButtonInfo.ButtonState.Disabled : Cui.ButtonInfo.ButtonState.Enabled),
			};
		}

		public override void MenuButtonCallback(UserInfo player, string value) {

			if (value == "changedir") {
				ChangeDirection();
			} else if (value == "mode") {
				NextMode();
			} else if (value == "autostarter") {
				ToggleAutoStarter();
			}
		}

		#endregion
	}

	[JInfo(typeof(Jtech), "Trash Can", "https://i.imgur.com/lEXshkx.png")]
	[JRequirement("scrap", 10)]

	public class TrashCan : JDeployable {



	}
}
